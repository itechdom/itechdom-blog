[{"title":"Concepts","ideas":{"1":{"title":"Definition","id":28,"attr":{"attachment":{"contentType":"text/html","content":"<div><span style=\"color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, sans-serif; font-size: 31.5px; font-weight: bold; line-height: 24px;\">Introduction</span><br></div><div><p style=\"color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, sans-serif; font-size: 16px; line-height: 24px;\"></p><aside style=\"font-size: small; left: 780px; position: absolute; width: 180px; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, sans-serif; line-height: 24px;\">Read&nbsp;<a href=\"https://github.com/mbostock/d3/wiki/Tutorials\" style=\"color: steelblue;\" target=\"_blank\">more tutorials</a>.</aside><p style=\"color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, sans-serif; font-size: 16px; line-height: 24px;\"><b>D3</b>&nbsp;allows you to bind arbitrary data to a Document Object Model (DOM), and then apply data-driven transformations to the document. For example, you can use D3 to generate an HTML table from an array of numbers. Or, use the same data to create an interactive SVG bar chart with smooth transitions and interaction.</p><p style=\"color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, sans-serif; font-size: 16px; line-height: 24px;\">D3 is not a monolithic framework that seeks to provide every conceivable feature. Instead, D3 solves the crux of the problem: efficient manipulation of documents based on data. This avoids proprietary representation and affords extraordinary flexibility, exposing the full capabilities of web standards such as HTML, SVG, and CSS. With minimal overhead, D3 is extremely fast, supporting large datasets and dynamic behaviors for interaction and animation. D3’s functional style allows code reuse through a diverse collection of&nbsp;<a href=\"https://github.com/mbostock/d3/wiki/API-Reference\" style=\"color: steelblue;\" target=\"_blank\">components</a>&nbsp;and&nbsp;<a href=\"https://github.com/d3/d3-plugins\" style=\"color: steelblue;\" target=\"_blank\">plugins</a>.</p><p style=\"color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, sans-serif; font-size: 16px; line-height: 24px;\"><br></p><p style=\"color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, sans-serif; font-size: 16px; line-height: 24px;\"><br></p><p style=\"color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, sans-serif; font-size: 16px; line-height: 24px;\">D3 lets you transform documents based on data; this includes both creating and destroying elements. D3 allows you to change an existing document in response to user interaction, animation over time, or even asynchronous notification from a third-party. A hybrid approach is even possible, where the document is initially rendered on the server, and updated on the client via D3<br></p></div>"},"style":{}},"ideas":{"1":{"title":"you generate tables of data","id":29}}},"2":{"title":"Collections","id":30},"3":{"title":"Plugins","id":31},"4":{"title":"Examples","id":32,"ideas":{"1":{"title":"Simple document selections","id":33,"attr":{"attachment":{"contentType":"text/html","content":"<div>d3.selectAll(\"p\").style(\"color\", \"white\");</div>"},"style":{}}},"2":{"title":"Data combined with DOM","id":36,"attr":{"attachment":{"contentType":"text/html","content":"<div><font color=\"#000000\"><span style=\"white-space: pre-wrap; background-color: rgb(245, 245, 245);\">d3.selectAll(\"p\")</span></font></div><div><font color=\"#000000\"><span style=\"white-space: pre-wrap; background-color: rgb(245, 245, 245);\">&nbsp; &nbsp; .data([4, 8, 15, 16, 23, 42])</span></font></div><div><font color=\"#000000\"><span style=\"white-space: pre-wrap; background-color: rgb(245, 245, 245);\">&nbsp; &nbsp; .style(\"font-size\", function(d) { return d + \"px\"; });</span></font></div>"},"style":{}}}}},"5":{"title":"Dynamic Properties","id":34,"attr":{"style":{}},"ideas":{"1":{"title":"https://d3js.org/#properties","id":35}}},"6":{"title":"Enter and Exit","id":39,"ideas":{"1":{"title":"add data on exit and on enter?","id":40,"attr":{"style":{"background":"#800000"}},"ideas":{"1":{"title":"when updating the chart","id":66},"2":{"title":"When removing the chart","id":67,"ideas":{"1":{"title":"when there's no data","id":68}}},"3":{"title":"when enter","id":70,"ideas":{"1":{"title":"you enter new data after you bind it","id":75,"ideas":{"1":{"title":"example","id":76,"attr":{"attachment":{"contentType":"text/html","content":"<pre style=\"font-family: Menlo, monospace; border-left-width: 2px; border-left-color: rgb(204, 204, 204); padding-left: 18px; margin-top: 2em; margin-bottom: 2em; margin-left: -20px; font-size: medium; line-height: normal;\"><code class=\"javascript\" style=\"font-family: Menlo, monospace; line-height: 1em;\"><span class=\"keyword\" style=\"color: rgb(49, 130, 189);\">var</span> svg = d3.select(<span class=\"string\" style=\"color: rgb(117, 107, 177);\">\"svg\"</span>);\n\n<span class=\"keyword\" style=\"color: rgb(49, 130, 189);\">var</span> circle = svg.selectAll(<span class=\"string\" style=\"color: rgb(117, 107, 177);\">\"circle\"</span>)\n    .data([<span class=\"number\" style=\"color: rgb(49, 163, 84);\">32</span>, <span class=\"number\" style=\"color: rgb(49, 163, 84);\">57</span>, <span class=\"number\" style=\"color: rgb(49, 163, 84);\">112</span>, <span class=\"number\" style=\"color: rgb(49, 163, 84);\">293</span>]);\n\n<span class=\"keyword\" style=\"color: rgb(49, 130, 189);\">var</span> circleEnter = circle.enter().append(<span class=\"string\" style=\"color: rgb(117, 107, 177);\">\"circle\"</span>);</code></pre><pre style=\"font-family: Menlo, monospace; border-left-width: 2px; border-left-color: rgb(204, 204, 204); padding-left: 18px; margin-top: 2em; margin-bottom: 2em; margin-left: -20px; font-size: medium; line-height: normal;\"><code class=\"javascript\" style=\"font-family: Menlo, monospace; line-height: 1em;\">In the previous example, we entered the dat and appended a circle based on that data</code></pre>"},"style":{}}}}}}}}},"2":{"title":"Example of entering","id":72,"ideas":{"1":{"title":"https://bost.ocks.org/mike/circles/#entering","id":73}}}}},"7":{"title":"transitions","id":41,"ideas":{"1":{"title":"https://bost.ocks.org/mike/transition/","id":78}}},"8":{"title":"data joins","id":47},"9":{"title":"Linear scale","id":53,"ideas":{"1":{"title":"increase by a numbered scale","id":54}}},"10":{"title":"ordinal scale","id":55,"attr":{"attachment":{"contentType":"text/html","content":"<a href=\"https://github.com/mbostock/d3/wiki/Ordinal-Scales\" style=\"color: steelblue; font-family: 'PT Serif', serif; font-size: medium; line-height: 24px; background-color: rgb(252, 252, 250);\">ordinal scales</a><span style=\"font-family: 'PT Serif', serif; font-size: medium; line-height: 24px; background-color: rgb(252, 252, 250);\">&nbsp;encode ordinal data. We can thus use an ordinal scale to simplify the positioning of bars by letter.</span>"},"style":{}},"ideas":{"1":{"title":"use rangebands","id":56,"ideas":{"1":{"title":"to achieve x(0) = 0 ,x(1) = 160 (or however width you specified)","id":57,"ideas":{}}}}}},"11":{"title":"margins","id":59,"attr":{"attachment":{"contentType":"text/html","content":"<p style=\"line-height: 1.5em; width: 720px; font-family: 'PT Serif', serif; font-size: medium;\"><a href=\"https://bl.ocks.org/mbostock/3019563\" style=\"color: steelblue;\">By convention</a>, margins in D3 are specified as an object with top, right, bottom and left properties. Then, the&nbsp;<i>outer</i>&nbsp;size of the chart area, which includes the margins, is used to compute the&nbsp;<i>inner</i>&nbsp;size available for graphical marks by subtracting the margins. For example, reasonable values for a 960×500 chart are:</p><pre style=\"font-family: Menlo, monospace; border-left-width: 2px; border-left-color: rgb(204, 204, 204); padding-left: 18px; margin-top: 2em; margin-bottom: 2em; margin-left: -20px; font-size: medium; line-height: normal;\"><code class=\"javascript\" style=\"font-family: Menlo, monospace; line-height: 1em;\"><span class=\"keyword\" style=\"color: rgb(49, 130, 189);\">var</span> margin = {top: <span class=\"number\" style=\"color: rgb(49, 163, 84);\">20</span>, right: <span class=\"number\" style=\"color: rgb(49, 163, 84);\">30</span>, bottom: <span class=\"number\" style=\"color: rgb(49, 163, 84);\">30</span>, left: <span class=\"number\" style=\"color: rgb(49, 163, 84);\">40</span>},\n    width = <span class=\"number\" style=\"color: rgb(49, 163, 84);\">960</span> - margin.left - margin.right,\n    height = <span class=\"number\" style=\"color: rgb(49, 163, 84);\">500</span> - margin.top - margin.bottom;</code></pre>"},"style":{}}},"12":{"title":"loading external resources","id":65}},"id":5,"attr":{"style":{},"position":[112,-97,2]}},{"title":"Code PEN","id":37,"attr":{"position":[56.5,123,3],"style":{}},"ideas":{"1":{"title":"http://codepen.io/javasop/pen/grMJEM?editors=1010","id":38,"ideas":{"1":{"title":"basic D3","id":43}}},"2":{"title":"http://codepen.io/javasop/pen/mPEYYP?editors=1010","id":45,"ideas":{"1":{"title":"bar chart","id":46}}},"3":{"title":"http://codepen.io/javasop/pen/GZqaVj?editors=1010","id":48,"ideas":{"1":{"title":"bar chart part 2","id":49}}}}},{"title":"Resources","ideas":{"1":{"title":"https://d3js.org/","id":60,"attr":{"style":{}}},"2":{"title":"https://github.com/mbostock/d3/wiki/Tutorials","id":61,"ideas":{"1":{"title":"list of tutorials","id":62}}},"3":{"title":"https://github.com/mbostock/d3/wiki/API-Reference","id":63,"ideas":{"1":{"title":"API reference","id":64}}}},"id":3,"attr":{"style":{},"position":[142,-99,1]}},{"title":"Source Code","id":27,"ideas":{}}]