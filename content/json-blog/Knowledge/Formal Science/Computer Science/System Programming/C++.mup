[{"title":"Concepts","content":"<ul class=\"nav nav-list primary left-menu\" style=\"box-sizing: border-box; padding-right: 0px; padding-left: 0px; color: rgb(49, 49, 49); font-family: 'Open Sans', Arial, sans-serif; line-height: 22px; background-color: rgb(238, 238, 238);\"><li class=\"heading\" style=\"box-sizing: border-box; line-height: 14px; position: relative; display: block; margin: 0px; border: 1px solid rgb(121, 119, 119); color: rgb(255, 255, 255); padding: 0px; background-image: url(&quot;/images/pattern.png&quot;) !important; background-attachment: initial !important; background-color: rgb(0, 68, 129) !important; background-size: initial !important; background-origin: initial !important; background-clip: initial !important; background-position: 50% 50%; background-repeat: repeat !important;\">C++ Object Oriented<br></li></ul><ul class=\"nav nav-list primary left-menu\" style=\"box-sizing: border-box; padding-right: 0px; padding-left: 0px; color: rgb(49, 49, 49); font-family: 'Open Sans', Arial, sans-serif; line-height: 22px; background-color: rgb(238, 238, 238);\"><li style=\"box-sizing: border-box; line-height: 14px; position: relative; display: block; margin: 0px; padding: 0px;\"><a href=\"http://www.tutorialspoint.com/cplusplus/cpp_classes_objects.htm\" style=\"box-sizing: border-box; color: rgb(0, 0, 0); position: relative; padding: 8px 17px; font-size: 0.9em; border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187); transition: all 0.3s; outline: none !important; background: url(&quot;/images/list-icon.png&quot;) 0px 9px no-repeat;\" target=\"_blank\">C++ Classes &amp; Objects</a></li><li style=\"box-sizing: border-box; line-height: 14px; position: relative; display: block; margin: 0px; padding: 0px;\"><a href=\"http://www.tutorialspoint.com/cplusplus/cpp_inheritance.htm\" style=\"box-sizing: border-box; color: rgb(0, 0, 0); position: relative; padding: 8px 17px; font-size: 0.9em; border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187); transition: all 0.3s; outline: none !important; background: url(&quot;/images/list-icon.png&quot;) 0px 9px no-repeat;\" target=\"_blank\">C++ Inheritance</a></li><li style=\"box-sizing: border-box; line-height: 14px; position: relative; display: block; margin: 0px; padding: 0px;\"><a href=\"http://www.tutorialspoint.com/cplusplus/cpp_overloading.htm\" style=\"box-sizing: border-box; color: rgb(0, 0, 0); position: relative; padding: 8px 17px; font-size: 0.9em; border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187); transition: all 0.3s; outline: none !important; background: url(&quot;/images/list-icon.png&quot;) 0px 9px no-repeat;\" target=\"_blank\">C++ Overloading</a></li><li style=\"box-sizing: border-box; line-height: 14px; position: relative; display: block; margin: 0px; padding: 0px;\"><a href=\"http://www.tutorialspoint.com/cplusplus/cpp_polymorphism.htm\" style=\"box-sizing: border-box; color: rgb(0, 0, 0); position: relative; padding: 8px 17px; font-size: 0.9em; border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187); transition: all 0.3s; outline: none !important; background: url(&quot;/images/list-icon.png&quot;) 0px 9px no-repeat;\" target=\"_blank\">C++ Polymorphism</a></li><li style=\"box-sizing: border-box; line-height: 14px; position: relative; display: block; margin: 0px; padding: 0px;\"><a href=\"http://www.tutorialspoint.com/cplusplus/cpp_data_abstraction.htm\" style=\"box-sizing: border-box; color: rgb(0, 0, 0); position: relative; padding: 8px 17px; font-size: 0.9em; border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187); transition: all 0.3s; outline: none !important; background: url(&quot;/images/list-icon.png&quot;) 0px 9px no-repeat;\" target=\"_blank\">C++ Abstraction</a></li><li style=\"box-sizing: border-box; line-height: 14px; position: relative; display: block; margin: 0px; padding: 0px;\"><a href=\"http://www.tutorialspoint.com/cplusplus/cpp_data_encapsulation.htm\" style=\"box-sizing: border-box; color: rgb(0, 0, 0); position: relative; padding: 8px 17px; font-size: 0.9em; border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187); transition: all 0.3s; outline: none !important; background: url(&quot;/images/list-icon.png&quot;) 0px 9px no-repeat;\" target=\"_blank\">C++ Encapsulation</a></li><li style=\"box-sizing: border-box; line-height: 14px; position: relative; display: block; margin: 0px; padding: 0px;\"><a href=\"http://www.tutorialspoint.com/cplusplus/cpp_interfaces.htm\" style=\"box-sizing: border-box; color: rgb(0, 0, 0); position: relative; padding: 8px 17px; font-size: 0.9em; border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187); transition: all 0.3s; outline: none !important; background: url(&quot;/images/list-icon.png&quot;) 0px 9px no-repeat;\" target=\"_blank\">C++ Interfaces</a></li></ul><ul class=\"nav nav-list primary left-menu\" style=\"box-sizing: border-box; padding-right: 0px; padding-left: 0px; color: rgb(49, 49, 49); font-family: 'Open Sans', Arial, sans-serif; line-height: 22px; background-color: rgb(238, 238, 238);\"><li class=\"heading\" style=\"box-sizing: border-box; line-height: 14px; position: relative; display: block; margin: 0px; border: 1px solid rgb(121, 119, 119); color: rgb(255, 255, 255); padding: 0px; background-image: url(&quot;/images/pattern.png&quot;) !important; background-attachment: initial !important; background-color: rgb(0, 68, 129) !important; background-size: initial !important; background-origin: initial !important; background-clip: initial !important; background-position: 50% 50%; background-repeat: repeat !important;\">C++ Advanced</li><li style=\"box-sizing: border-box; line-height: 14px; position: relative; display: block; margin: 0px; padding: 0px;\"><a href=\"http://www.tutorialspoint.com/cplusplus/cpp_files_streams.htm\" style=\"box-sizing: border-box; color: rgb(0, 0, 0); position: relative; padding: 8px 17px; font-size: 0.9em; border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187); transition: all 0.3s; outline: none !important; background: url(&quot;/images/list-icon.png&quot;) 0px 9px no-repeat rgb(214, 214, 214);\" target=\"_blank\">C++ Files and Streams</a></li><li style=\"box-sizing: border-box; line-height: 14px; position: relative; display: block; margin: 0px; padding: 0px;\"><a href=\"http://www.tutorialspoint.com/cplusplus/cpp_exceptions_handling.htm\" style=\"box-sizing: border-box; color: rgb(0, 0, 0); position: relative; padding: 8px 17px; font-size: 0.9em; border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187); transition: all 0.3s; outline: none !important; background: url(&quot;/images/list-icon.png&quot;) 0px 9px no-repeat;\" target=\"_blank\">C++ Exception Handling</a></li><li style=\"box-sizing: border-box; line-height: 14px; position: relative; display: block; margin: 0px; padding: 0px;\"><a href=\"http://www.tutorialspoint.com/cplusplus/cpp_dynamic_memory.htm\" style=\"box-sizing: border-box; color: rgb(0, 0, 0); position: relative; padding: 8px 17px; font-size: 0.9em; border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187); transition: all 0.3s; outline: none !important; background: url(&quot;/images/list-icon.png&quot;) 0px 9px no-repeat;\" target=\"_blank\">C++ Dynamic Memory</a></li><li style=\"box-sizing: border-box; line-height: 14px; position: relative; display: block; margin: 0px; padding: 0px;\"><a href=\"http://www.tutorialspoint.com/cplusplus/cpp_namespaces.htm\" style=\"box-sizing: border-box; color: rgb(0, 0, 0); position: relative; padding: 8px 17px; font-size: 0.9em; border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187); transition: all 0.3s; outline: none !important; background: url(&quot;/images/list-icon.png&quot;) 0px 9px no-repeat;\" target=\"_blank\">C++ Namespaces</a></li><li style=\"box-sizing: border-box; line-height: 14px; position: relative; display: block; margin: 0px; padding: 0px;\"><a href=\"http://www.tutorialspoint.com/cplusplus/cpp_templates.htm\" style=\"box-sizing: border-box; color: rgb(0, 0, 0); position: relative; padding: 8px 17px; font-size: 0.9em; border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187); transition: all 0.3s; outline: none !important; background: url(&quot;/images/list-icon.png&quot;) 0px 9px no-repeat;\" target=\"_blank\">C++ Templates</a></li><li style=\"box-sizing: border-box; line-height: 14px; position: relative; display: block; margin: 0px; padding: 0px;\"><a href=\"http://www.tutorialspoint.com/cplusplus/cpp_preprocessor.htm\" style=\"box-sizing: border-box; color: rgb(0, 0, 0); position: relative; padding: 8px 17px; font-size: 0.9em; border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187); transition: all 0.3s; outline: none !important; background: url(&quot;/images/list-icon.png&quot;) 0px 9px no-repeat;\" target=\"_blank\">C++ Preprocessor</a></li><li style=\"box-sizing: border-box; line-height: 14px; position: relative; display: block; margin: 0px; padding: 0px;\"><a href=\"http://www.tutorialspoint.com/cplusplus/cpp_signal_handling.htm\" style=\"box-sizing: border-box; color: rgb(0, 0, 0); position: relative; padding: 8px 17px; font-size: 0.9em; border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187); transition: all 0.3s; outline: none !important; background: url(&quot;/images/list-icon.png&quot;) 0px 9px no-repeat;\" target=\"_blank\">C++ Signal Handling</a></li><li style=\"box-sizing: border-box; line-height: 14px; position: relative; display: block; margin: 0px; padding: 0px;\"><a href=\"http://www.tutorialspoint.com/cplusplus/cpp_multithreading.htm\" style=\"box-sizing: border-box; color: rgb(0, 0, 0); position: relative; padding: 8px 17px; font-size: 0.9em; border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187); transition: all 0.3s; outline: none !important; background: url(&quot;/images/list-icon.png&quot;) 0px 9px no-repeat;\" target=\"_blank\">C++ Multithreading</a></li><li style=\"box-sizing: border-box; line-height: 14px; position: relative; display: block; margin: 0px; padding: 0px;\"><a href=\"http://www.tutorialspoint.com/cplusplus/cpp_web_programming.htm\" style=\"box-sizing: border-box; color: rgb(0, 0, 0); position: relative; padding: 8px 17px; font-size: 0.9em; border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187); transition: all 0.3s; outline: none !important; background: url(&quot;/images/list-icon.png&quot;) 0px 9px no-repeat;\" target=\"_blank\">C++ Web Programming</a></li><li style=\"box-sizing: border-box; line-height: 14px; position: relative; display: block; margin: 0px; padding: 0px;\"><div><br></div></li></ul><ul class=\"nav nav-list primary left-menu\" style=\"box-sizing: border-box; padding-right: 0px; padding-left: 0px; color: rgb(49, 49, 49); font-family: 'Open Sans', Arial, sans-serif; line-height: 22px; background-color: rgb(238, 238, 238);\"></ul>","key":0,"id":2,"level":0,"ideas":{"1":{"title":".h and .cpp","key":1,"id":35,"level":0,"ideas":{"1":{"title":"header files are included instead of cpp","key":1,"id":36,"level":0,"ideasArr":[]}},"ideasArr":[{"title":"header files are included instead of cpp","id":36}]},"2":{"title":"Namespaces","key":2,"id":42,"level":1,"ideasArr":[]},"3":{"title":"Allocation","key":3,"id":43,"level":2,"ideas":{"1":{"title":"Stack","key":1,"id":44,"level":0,"ideas":{"1":{"title":"Function Variables","key":1,"id":48,"level":0,"ideasArr":[]}},"ideasArr":[{"title":"Function Variables","id":48}]},"2":{"title":"Heap","key":2,"id":46,"level":1,"ideas":{"1":{"title":"Dynamically allocated memory","key":1,"id":47,"level":0,"ideasArr":[]}},"ideasArr":[{"title":"Dynamically allocated memory","id":47}]}},"ideasArr":[{"title":"Stack","id":44,"ideas":{"1":{"title":"Function Variables","key":1,"id":48,"level":0,"ideasArr":[]}}},{"title":"Heap","id":46,"ideas":{"1":{"title":"Dynamically allocated memory","key":1,"id":47,"level":0,"ideasArr":[]}}}]}},"ideasArr":[{"title":".h and .cpp","id":35,"ideas":{"1":{"title":"header files are included instead of cpp","key":1,"id":36,"level":0,"ideasArr":[]}}},{"title":"Namespaces","id":42},{"title":"Allocation","id":43,"ideas":{"1":{"title":"Stack","key":1,"id":44,"level":0,"ideas":{"1":{"title":"Function Variables","key":1,"id":48,"level":0,"ideasArr":[]}},"ideasArr":[{"title":"Function Variables","id":48}]},"2":{"title":"Heap","key":2,"id":46,"level":1,"ideas":{"1":{"title":"Dynamically allocated memory","key":1,"id":47,"level":0,"ideasArr":[]}},"ideasArr":[{"title":"Dynamically allocated memory","id":47}]}}}]},{"title":"Pain Points","key":1,"id":11,"level":1,"ideas":{"1":{"title":"references ","key":1,"id":13,"level":0,"ideasArr":[]},"2":{"title":"Pointers","key":2,"id":14,"level":1,"ideasArr":[]},"3":{"title":"<< with cout","content":"<h3 style=\"color: rgb(0, 0, 0); font-family: Times; line-height: normal;\">Overloading &lt;&lt; and &gt;&gt;</h3><span style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; line-height: normal;\">The above is verbose so a more elegant way is provided. The C++ language does&nbsp;</span><i style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; line-height: normal;\">not</i><span style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; line-height: normal;\">&nbsp;include an I/O system, but one of its core concepts is that it is extendible. Although its operator set cannot be increased, the meanings of operators depend on the context in which they are used. When applied to new objects the meaning can be redefined. So, the left shift operator &lt;&lt; has, in the standard I/O library, been overloaded to be the put function when its left hand argument is an input stream. Hence:-</span><pre style=\"color: rgb(0, 0, 0); line-height: normal;\">cout &lt;&lt;  \"x = \";\n</pre><span style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; line-height: normal;\">is the same as</span><pre style=\"color: rgb(0, 0, 0); line-height: normal;\">put(cout,\"x = \");\n</pre><span style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; line-height: normal;\">The side effect is to output the right hand variable and the expression produces a value that is an output stream (technically its a&nbsp;</span><a href=\"http://www-numi.fnal.gov/offline_software/srt_public_context/WebDocs/Companion/glossary/reference.html\" style=\"font-family: Times; font-size: medium; line-height: normal;\">reference</a><span style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; line-height: normal;\">&nbsp;to an output stream, but it amounts to the same thing). This value can be used again as the left hand size of a &lt;&lt;. So to call the put functions 3 times as before:-</span><pre style=\"color: rgb(0, 0, 0); line-height: normal;\">cout &lt;&lt; \"x = \" &lt;&lt; x &lt;&lt; \"\\n\";\n</pre><span style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; line-height: normal;\">because the &lt;&lt; operator is evaluated left to right. It take a little getting used to for a FORTRAN programmer, but after a while you get used to seeing this as a cout object with a stream of values flowing into it.</span><p style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; line-height: normal;\">As you might expect, input simply reverses the sign on the flow, so to read 3 numbers from the input stream and store them in x, y, z:-</p><pre style=\"color: rgb(0, 0, 0); line-height: normal;\">cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n</pre>","key":3,"id":30,"level":2,"ideas":{"1":{"title":"binary shift","key":1,"id":37,"level":0,"ideasArr":[]},"2":{"title":"http://www-numi.fnal.gov/offline_software/srt_public_context/WebDocs/Companion/cxx_crib/input_output.html","key":2,"id":38,"level":1,"ideasArr":[]}},"ideasArr":[{"title":"binary shift","id":37},{"title":"http://www-numi.fnal.gov/offline_software/srt_public_context/WebDocs/Companion/cxx_crib/input_output.html","id":38}]}},"ideasArr":[{"title":"references ","id":13},{"title":"Pointers","id":14},{"title":"<< with cout","id":30,"ideas":{"1":{"title":"binary shift","key":1,"id":37,"level":0,"ideasArr":[]},"2":{"title":"http://www-numi.fnal.gov/offline_software/srt_public_context/WebDocs/Companion/cxx_crib/input_output.html","key":2,"id":38,"level":1,"ideasArr":[]}},"attr":{"attachment":{"contentType":"text/html","content":"<h3 style=\"color: rgb(0, 0, 0); font-family: Times; line-height: normal;\">Overloading &lt;&lt; and &gt;&gt;</h3><span style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; line-height: normal;\">The above is verbose so a more elegant way is provided. The C++ language does&nbsp;</span><i style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; line-height: normal;\">not</i><span style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; line-height: normal;\">&nbsp;include an I/O system, but one of its core concepts is that it is extendible. Although its operator set cannot be increased, the meanings of operators depend on the context in which they are used. When applied to new objects the meaning can be redefined. So, the left shift operator &lt;&lt; has, in the standard I/O library, been overloaded to be the put function when its left hand argument is an input stream. Hence:-</span><pre style=\"color: rgb(0, 0, 0); line-height: normal;\">cout &lt;&lt;  \"x = \";\n</pre><span style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; line-height: normal;\">is the same as</span><pre style=\"color: rgb(0, 0, 0); line-height: normal;\">put(cout,\"x = \");\n</pre><span style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; line-height: normal;\">The side effect is to output the right hand variable and the expression produces a value that is an output stream (technically its a&nbsp;</span><a href=\"http://www-numi.fnal.gov/offline_software/srt_public_context/WebDocs/Companion/glossary/reference.html\" style=\"font-family: Times; font-size: medium; line-height: normal;\">reference</a><span style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; line-height: normal;\">&nbsp;to an output stream, but it amounts to the same thing). This value can be used again as the left hand size of a &lt;&lt;. So to call the put functions 3 times as before:-</span><pre style=\"color: rgb(0, 0, 0); line-height: normal;\">cout &lt;&lt; \"x = \" &lt;&lt; x &lt;&lt; \"\\n\";\n</pre><span style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; line-height: normal;\">because the &lt;&lt; operator is evaluated left to right. It take a little getting used to for a FORTRAN programmer, but after a while you get used to seeing this as a cout object with a stream of values flowing into it.</span><p style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; line-height: normal;\">As you might expect, input simply reverses the sign on the flow, so to read 3 numbers from the input stream and store them in x, y, z:-</p><pre style=\"color: rgb(0, 0, 0); line-height: normal;\">cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n</pre>"},"style":{}}}]},{"title":"Resources","key":2,"id":3,"level":2,"ideas":{"1":{"title":"https://en.wikipedia.org/wiki/C%2B%2B","key":1,"id":6,"level":0,"ideas":{},"ideasArr":[]},"6":{"title":"Sample Codes","key":6,"id":39,"level":1,"ideas":{"3":{"title":"github examples","key":3,"id":16,"level":0,"ideas":{"1":{"title":"https://github.com/sinairv/Cpp-Tutorial-Samples","key":1,"id":15,"level":0,"ideas":{},"ideasArr":[]},"2":{"title":"https://github.com/sftrabbit/CppSamples-Samples","key":2,"id":33,"level":1,"ideas":{},"ideasArr":[]}},"ideasArr":[{"title":"https://github.com/sinairv/Cpp-Tutorial-Samples","id":15,"ideas":{},"attr":{"style":{}}},{"title":"https://github.com/sftrabbit/CppSamples-Samples","id":33,"ideas":{},"attr":{"style":{}}}]}},"ideasArr":[{"title":"github examples","id":16,"attr":{"style":{}},"ideas":{"1":{"title":"https://github.com/sinairv/Cpp-Tutorial-Samples","key":1,"id":15,"level":0,"ideas":{},"ideasArr":[]},"2":{"title":"https://github.com/sftrabbit/CppSamples-Samples","key":2,"id":33,"level":1,"ideas":{},"ideasArr":[]}}}]},"9":{"title":"tutorial point ","key":9,"id":41,"level":2,"ideas":{"1":{"title":"http://www.tutorialspoint.com/cplusplus/cpp_files_streams.htm","key":1,"id":40,"level":0,"ideas":{},"ideasArr":[]}},"ideasArr":[{"title":"http://www.tutorialspoint.com/cplusplus/cpp_files_streams.htm","id":40,"ideas":{},"attr":{"style":{}}}]},"10":{"title":"top trending repos","key":10,"id":18,"level":3,"ideas":{"1":{"title":"https://github.com/search?l=C%2B%2B&q=c%2B%2B&type=Repositories&utf8=%E2%9C%93","key":1,"id":17,"level":0,"ideas":{},"ideasArr":[]}},"ideasArr":[{"title":"https://github.com/search?l=C%2B%2B&q=c%2B%2B&type=Repositories&utf8=%E2%9C%93","id":17,"ideas":{},"attr":{"style":{}}}]},"12":{"title":"QA for a book","key":12,"id":51,"level":4,"ideas":{"1":{"title":"https://github.com/Mooophy/Cpp-Primer","key":1,"id":49,"level":0,"ideas":{},"ideasArr":[]}},"ideasArr":[{"title":"https://github.com/Mooophy/Cpp-Primer","id":49,"ideas":{},"attr":{"style":{}}}]},"13":{"title":"OpenFrameworks","key":13,"id":52,"level":5,"ideas":{"1":{"title":"http://openframeworks.cc/documentation/","key":1,"id":53,"level":0,"ideasArr":[]}},"ideasArr":[{"title":"http://openframeworks.cc/documentation/","id":53}]}},"ideasArr":[{"title":"https://en.wikipedia.org/wiki/C%2B%2B","id":6,"ideas":{},"attr":{"style":{}}},{"title":"Sample Codes","id":39,"ideas":{"3":{"title":"github examples","key":3,"id":16,"level":0,"ideas":{"1":{"title":"https://github.com/sinairv/Cpp-Tutorial-Samples","key":1,"id":15,"level":0,"ideas":{},"ideasArr":[]},"2":{"title":"https://github.com/sftrabbit/CppSamples-Samples","key":2,"id":33,"level":1,"ideas":{},"ideasArr":[]}},"ideasArr":[{"title":"https://github.com/sinairv/Cpp-Tutorial-Samples","id":15,"ideas":{},"attr":{"style":{}}},{"title":"https://github.com/sftrabbit/CppSamples-Samples","id":33,"ideas":{},"attr":{"style":{}}}]}},"attr":{"style":{}}},{"title":"tutorial point ","id":41,"attr":{"style":{}},"ideas":{"1":{"title":"http://www.tutorialspoint.com/cplusplus/cpp_files_streams.htm","key":1,"id":40,"level":0,"ideas":{},"ideasArr":[]}}},{"title":"top trending repos","id":18,"attr":{"style":{}},"ideas":{"1":{"title":"https://github.com/search?l=C%2B%2B&q=c%2B%2B&type=Repositories&utf8=%E2%9C%93","key":1,"id":17,"level":0,"ideas":{},"ideasArr":[]}}},{"title":"QA for a book","id":51,"ideas":{"1":{"title":"https://github.com/Mooophy/Cpp-Primer","key":1,"id":49,"level":0,"ideas":{},"ideasArr":[]}}},{"title":"OpenFrameworks","id":52,"ideas":{"1":{"title":"http://openframeworks.cc/documentation/","key":1,"id":53,"level":0,"ideasArr":[]}}}]},{"title":"Third Party","key":3,"id":19,"level":3,"ideas":{"1":{"title":"https://github.com/cocos2d/cocos2d-x","key":1,"id":20,"level":0,"ideas":{"1":{"title":"cocos2d","key":1,"id":21,"level":0,"ideasArr":[]}},"ideasArr":[{"title":"cocos2d","id":21}]},"2":{"title":"https://github.com/facebook/proxygen","key":2,"id":22,"level":1,"ideas":{"1":{"title":"proxygen http server","key":1,"id":23,"level":0,"ideasArr":[]}},"ideasArr":[{"title":"proxygen http server","id":23}]},"3":{"title":"https://github.com/chenshuo/muduo","key":3,"id":24,"level":2,"ideas":{"1":{"title":"multi-threaded server library","key":1,"id":25,"level":0,"ideasArr":[]}},"ideasArr":[{"title":"multi-threaded server library","id":25}]},"4":{"title":"https://github.com/ipkn/crow","key":4,"id":26,"level":3,"ideas":{"1":{"title":"web framework inspired by flask","key":1,"id":27,"level":0,"ideasArr":[]}},"ideasArr":[{"title":"web framework inspired by flask","id":27}]},"5":{"title":"https://github.com/d5/node.native","key":5,"id":28,"level":4,"ideas":{"1":{"title":"node.native library for c++","key":1,"id":29,"level":0,"ideasArr":[]}},"ideasArr":[{"title":"node.native library for c++","id":29}]},"6":{"title":"https://github.com/beark/ftl","key":6,"id":31,"level":5,"ideas":{"1":{"title":"fp","key":1,"id":32,"level":0,"ideasArr":[]}},"ideasArr":[{"title":"fp","id":32}]},"7":{"title":"Non Blocking multi-threaded server","key":7,"id":55,"level":6,"ideas":{"1":{"title":"https://github.com/chenshuo/muduo","key":1,"id":56,"level":0,"ideasArr":[]}},"ideasArr":[{"title":"https://github.com/chenshuo/muduo","id":56}]},"8":{"title":"Templating Library","key":8,"id":57,"level":7,"ideas":{"1":{"title":"https://github.com/beark/ftl","key":1,"id":58,"level":0,"ideasArr":[]}},"ideasArr":[{"title":"https://github.com/beark/ftl","id":58}]}},"ideasArr":[{"title":"https://github.com/cocos2d/cocos2d-x","id":20,"ideas":{"1":{"title":"cocos2d","key":1,"id":21,"level":0,"ideasArr":[]}},"attr":{"style":{}}},{"title":"https://github.com/facebook/proxygen","id":22,"ideas":{"1":{"title":"proxygen http server","key":1,"id":23,"level":0,"ideasArr":[]}},"attr":{"style":{}}},{"title":"https://github.com/chenshuo/muduo","id":24,"ideas":{"1":{"title":"multi-threaded server library","key":1,"id":25,"level":0,"ideasArr":[]}},"attr":{"style":{}}},{"title":"https://github.com/ipkn/crow","id":26,"ideas":{"1":{"title":"web framework inspired by flask","key":1,"id":27,"level":0,"ideasArr":[]}},"attr":{"style":{}}},{"title":"https://github.com/d5/node.native","id":28,"ideas":{"1":{"title":"node.native library for c++","key":1,"id":29,"level":0,"ideasArr":[]}},"attr":{"style":{}}},{"title":"https://github.com/beark/ftl","id":31,"ideas":{"1":{"title":"fp","key":1,"id":32,"level":0,"ideasArr":[]}},"attr":{"style":{}}},{"title":"Non Blocking multi-threaded server","id":55,"ideas":{"1":{"title":"https://github.com/chenshuo/muduo","key":1,"id":56,"level":0,"ideasArr":[]}}},{"title":"Templating Library","id":57,"ideas":{"1":{"title":"https://github.com/beark/ftl","key":1,"id":58,"level":0,"ideasArr":[]}}}]}]