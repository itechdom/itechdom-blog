[{"title":"resources","key":0,"id":2,"level":0,"ideas":{"1":{"title":"http://docs.docker.com/mac/step_two/","key":1,"id":3,"level":0,"ideas":{"1":{"title":"doc how to get started with docker","key":1,"id":4,"level":0}}},"2":{"title":"https://docs.docker.com/mac/step_three/","key":2,"id":9,"level":1,"ideas":{"1":{"title":"whalesay example","key":1,"id":10,"level":0}}},"3":{"title":"https://docs.docker.com/engine/userguide/usingdocker/#run-a-simple-application","key":3,"id":18,"level":2,"ideas":{"1":{"title":"docker docs","key":1,"id":19,"level":0}}},"4":{"title":"https://hub.docker.com/","key":4,"id":20,"level":3,"ideas":{"1":{"title":"hub docker","key":1,"id":21,"level":0}}},"5":{"title":"https://github.com/wsargent/docker-cheat-sheet","key":5,"id":26,"level":4,"ideas":{"1":{"title":"docker cheat sheets","key":1,"id":27,"level":0}}}}},{"title":"concepts","key":1,"id":5,"level":1,"ideas":{"1":{"title":"Container","content":"this message appears when you run &lt;pre&gt;&lt;code&gt;docker run hello-world&lt;/code&gt;&lt;/pre&gt;<div><br></div><div><div>Hello from Docker.</div><div>This message shows that your installation appears to be working correctly.</div><div><br></div><div>To generate this message, Docker took the following steps:</div><div>&nbsp;1. The Docker client contacted the Docker daemon.</div><div>&nbsp;2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.</div><div>&nbsp;3. The Docker daemon created a new container from that image which runs the</div><div>&nbsp; &nbsp; executable that produces the output you are currently reading.</div><div>&nbsp;4. The Docker daemon streamed that output to the Docker client, which sent it</div><div>&nbsp; &nbsp; to your terminal.</div></div>","key":1,"id":6,"level":0},"3":{"title":"ubuntu bash example","content":"docker run -it ubuntu bash<div><br></div><div>&nbsp; -i, --interactive=false &nbsp; &nbsp; &nbsp; &nbsp; Keep STDIN open even if not attached<br></div><div><br></div><div>&nbsp; -t, --tty=false &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Allocate a pseudo-TTY<br></div>","key":3,"id":8,"level":1,"ideas":{"1":{"title":"https://docs.docker.com/engine/userguide/dockerizing/","key":1,"id":15,"level":0}}},"5":{"title":"Streaming input and outputs","content":"You can pass commands to docker containers so they can run them<div><br></div><div>docker run -d ubuntu:14.04 /bin/sh -c \"while true; do echo hello world; sleep 1; done\"<br></div>","key":5,"id":14,"level":2,"ideas":{}},"6":{"title":"Daemon","content":"<h2 id=\"a-daemonized-hello-world\" style=\"margin-top: 0.2rem; margin-bottom: 0.5rem; font-family: 'Helvetica Neue', Helvetica, Roboto, Arial, sans-serif; font-weight: 400; line-height: 1.4; color: rgb(2, 150, 201); font-size: 2.3125rem; box-sizing: inherit; padding: 0px; letter-spacing: 1px;\">A daemonized Hello world</h2><h2 id=\"a-daemonized-hello-world\" style=\"box-sizing: inherit; margin-top: 0.2rem; margin-bottom: 0.5rem; padding: 0px; color: rgb(2, 150, 201); font-family: 'Helvetica Neue', Helvetica, Roboto, Arial, sans-serif; font-weight: 400; line-height: 1.4; font-size: 2.3125rem; letter-spacing: 1px;\"><p style=\"margin-bottom: 1.25rem; box-sizing: inherit; padding: 0px; font-size: 16px; line-height: 1.6; text-rendering: optimizeLegibility; color: rgb(5, 14, 26);\">Now a container that runs a command and then exits has some uses but it’s not overly helpful. Let’s create a container that runs as a daemon, like most of the applications we’re probably going to run with Docker.</p><p style=\"margin-bottom: 1.25rem; box-sizing: inherit; padding: 0px; font-size: 16px; line-height: 1.6; text-rendering: optimizeLegibility; color: rgb(5, 14, 26);\">Again we can do this with the&nbsp;<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">docker run</code>&nbsp;command:</p><pre style=\"padding: 0px; color: rgb(5, 14, 26); margin-bottom: 1.5rem; letter-spacing: normal; box-sizing: inherit; background-color: rgb(255, 255, 255);\"><code class=\"hljs dns\" style=\"padding: 0.5em; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border: 1px solid rgb(255, 203, 148); box-sizing: inherit; display: block; overflow-x: auto; background: rgb(248, 248, 248);\">$ docker run -d ubuntu:14.04 /bin/sh -c \"while true<span class=\"hljs-comment\" style=\"box-sizing: inherit; color: rgb(153, 153, 136); font-style: italic;\">; do echo hello world; sleep 1; done\"</span>\n<span class=\"hljs-number\" style=\"box-sizing: inherit; color: rgb(0, 128, 128);\">1e5535038</span>e<span class=\"hljs-number\" style=\"box-sizing: inherit; color: rgb(0, 128, 128);\">285177d52146</span><span class=\"hljs-number\" style=\"box-sizing: inherit; color: rgb(0, 128, 128);\">59a068137486</span>f96ee<span class=\"hljs-number\" style=\"box-sizing: inherit; color: rgb(0, 128, 128);\">5c2e85a4</span>ac52dc83f2ebe4147\n</code></pre><p style=\"margin-bottom: 1.25rem; box-sizing: inherit; padding: 0px; font-size: 16px; line-height: 1.6; text-rendering: optimizeLegibility; color: rgb(5, 14, 26);\">Wait, what? Where’s our “hello world” output? Let’s look at what we’ve run here. It should look pretty familiar. We ran&nbsp;<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">docker run</code>&nbsp;but this time we specified a flag:&nbsp;<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">-d</code>. The&nbsp;<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">-d</code>&nbsp;flag tells Docker to run the container and put it in the background, to daemonize it.</p><p style=\"margin-bottom: 1.25rem; box-sizing: inherit; padding: 0px; font-size: 16px; line-height: 1.6; text-rendering: optimizeLegibility; color: rgb(5, 14, 26);\">We also specified the same image:&nbsp;<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">ubuntu:14.04</code>.</p><p style=\"margin-bottom: 1.25rem; box-sizing: inherit; padding: 0px; font-size: 16px; line-height: 1.6; text-rendering: optimizeLegibility; color: rgb(5, 14, 26);\">Finally, we specified a command to run:</p><pre style=\"padding: 0px; color: rgb(5, 14, 26); margin-bottom: 1.5rem; letter-spacing: normal; box-sizing: inherit; background-color: rgb(255, 255, 255);\"><code class=\"hljs vim\" style=\"padding: 0.5em; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border: 1px solid rgb(255, 203, 148); box-sizing: inherit; display: block; overflow-x: auto; background: rgb(248, 248, 248);\">/bin/<span class=\"hljs-keyword\" style=\"box-sizing: inherit; font-weight: bold;\">sh</span> -<span class=\"hljs-keyword\" style=\"box-sizing: inherit; font-weight: bold;\">c</span> <span class=\"hljs-string\" style=\"box-sizing: inherit; color: rgb(221, 17, 68);\">\"while true; do echo hello world; sleep 1; done\"</span>\n</code></pre><p style=\"margin-bottom: 1.25rem; box-sizing: inherit; padding: 0px; font-size: 16px; line-height: 1.6; text-rendering: optimizeLegibility; color: rgb(5, 14, 26);\">This is the (hello) world’s silliest daemon: a shell script that echoes&nbsp;<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">hello world</code>forever.</p><p style=\"margin-bottom: 1.25rem; box-sizing: inherit; padding: 0px; font-size: 16px; line-height: 1.6; text-rendering: optimizeLegibility; color: rgb(5, 14, 26);\">So why aren’t we seeing any&nbsp;<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">hello world</code>’s? Instead Docker has returned a really long string:</p><pre style=\"padding: 0px; color: rgb(5, 14, 26); margin-bottom: 1.5rem; letter-spacing: normal; box-sizing: inherit; background-color: rgb(255, 255, 255);\"><code class=\"hljs dns\" style=\"padding: 0.5em; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border: 1px solid rgb(255, 203, 148); box-sizing: inherit; display: block; overflow-x: auto; background: rgb(248, 248, 248);\"><span class=\"hljs-number\" style=\"box-sizing: inherit; color: rgb(0, 128, 128);\">1e5535038</span>e<span class=\"hljs-number\" style=\"box-sizing: inherit; color: rgb(0, 128, 128);\">285177d52146</span><span class=\"hljs-number\" style=\"box-sizing: inherit; color: rgb(0, 128, 128);\">59a068137486</span>f96ee<span class=\"hljs-number\" style=\"box-sizing: inherit; color: rgb(0, 128, 128);\">5c2e85a4</span>ac52dc83f2ebe4147\n</code></pre><p style=\"margin-bottom: 1.25rem; box-sizing: inherit; padding: 0px; font-size: 16px; line-height: 1.6; text-rendering: optimizeLegibility; color: rgb(5, 14, 26);\">This really long string is called a&nbsp;<em style=\"box-sizing: inherit; line-height: inherit;\">container ID</em>. It uniquely identifies a container so we can work with it.</p><blockquote style=\"padding-top: 0.5625rem; padding-right: 1.25rem; padding-left: 1.1875rem; margin-bottom: 1.25rem; border-left-width: 0px; border-left-color: black; letter-spacing: normal; box-sizing: inherit; line-height: 1.6; font-size: 16px;\"><p style=\"margin-bottom: 1.25rem; font-size: 1rem; line-height: 1.6; box-sizing: inherit; padding: 0px; font-family: inherit; text-rendering: optimizeLegibility; letter-spacing: 1px;\"><strong style=\"box-sizing: inherit; line-height: inherit;\">Note:</strong>&nbsp;The container ID is a bit long and unwieldy. A bit later, we’ll see a shorter ID and ways to name our containers to make working with them easier.</p></blockquote><p style=\"margin-bottom: 1.25rem; box-sizing: inherit; padding: 0px; font-size: 16px; line-height: 1.6; text-rendering: optimizeLegibility; color: rgb(5, 14, 26);\">We can use this container ID to see what’s happening with our&nbsp;<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">hello world</code>daemon.</p><p style=\"margin-bottom: 1.25rem; box-sizing: inherit; padding: 0px; font-size: 16px; line-height: 1.6; text-rendering: optimizeLegibility; color: rgb(5, 14, 26);\">Firstly let’s make sure our container is running. We can do that with the&nbsp;<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">docker ps</code>command. The&nbsp;<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">docker ps</code>&nbsp;command queries the Docker daemon for information about all the containers it knows about.</p><pre style=\"padding: 0px; color: rgb(5, 14, 26); margin-bottom: 1.5rem; letter-spacing: normal; box-sizing: inherit; background-color: rgb(255, 255, 255);\"><code class=\"hljs swift\" style=\"padding: 0.5em; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border: 1px solid rgb(255, 203, 148); box-sizing: inherit; display: block; overflow-x: auto; background: rgb(248, 248, 248);\">$ docker ps\n<span class=\"hljs-type\" style=\"box-sizing: inherit; color: rgb(68, 85, 136); font-weight: bold;\">CONTAINER</span> <span class=\"hljs-type\" style=\"box-sizing: inherit; color: rgb(68, 85, 136); font-weight: bold;\">ID</span>  <span class=\"hljs-type\" style=\"box-sizing: inherit; color: rgb(68, 85, 136); font-weight: bold;\">IMAGE</span>         <span class=\"hljs-type\" style=\"box-sizing: inherit; color: rgb(68, 85, 136); font-weight: bold;\">COMMAND</span>               <span class=\"hljs-type\" style=\"box-sizing: inherit; color: rgb(68, 85, 136); font-weight: bold;\">CREATED</span>        <span class=\"hljs-type\" style=\"box-sizing: inherit; color: rgb(68, 85, 136); font-weight: bold;\">STATUS</span>       <span class=\"hljs-type\" style=\"box-sizing: inherit; color: rgb(68, 85, 136); font-weight: bold;\">PORTS</span> <span class=\"hljs-type\" style=\"box-sizing: inherit; color: rgb(68, 85, 136); font-weight: bold;\">NAMES</span>\n1e5535038e28  ubuntu:<span class=\"hljs-number\" style=\"box-sizing: inherit; color: rgb(0, 128, 128);\">14.04</span>  /bin/sh -<span class=\"hljs-built_in\" style=\"box-sizing: inherit; color: rgb(0, 134, 179);\">c</span> '<span class=\"hljs-keyword\" style=\"box-sizing: inherit; font-weight: bold;\">while</span> tr  <span class=\"hljs-number\" style=\"box-sizing: inherit; color: rgb(0, 128, 128);\">2</span> minutes ago  <span class=\"hljs-type\" style=\"box-sizing: inherit; color: rgb(68, 85, 136); font-weight: bold;\">Up</span> <span class=\"hljs-number\" style=\"box-sizing: inherit; color: rgb(0, 128, 128);\">1</span> minute        insane_babbage\n</code></pre><p style=\"margin-bottom: 1.25rem; box-sizing: inherit; padding: 0px; font-size: 16px; line-height: 1.6; text-rendering: optimizeLegibility; color: rgb(5, 14, 26);\">Here we can see our daemonized container. The&nbsp;<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">docker ps</code>&nbsp;has returned some useful information about it, starting with a shorter variant of its container ID:<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">1e5535038e28</code>.</p><p style=\"margin-bottom: 1.25rem; box-sizing: inherit; padding: 0px; font-size: 16px; line-height: 1.6; text-rendering: optimizeLegibility; color: rgb(5, 14, 26);\">We can also see the image we used to build it,&nbsp;<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">ubuntu:14.04</code>, the command it is running, its status and an automatically assigned name,&nbsp;<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">insane_babbage</code>.</p><blockquote style=\"padding-top: 0.5625rem; padding-right: 1.25rem; padding-left: 1.1875rem; margin-bottom: 1.25rem; border-left-width: 0px; border-left-color: black; letter-spacing: normal; box-sizing: inherit; line-height: 1.6; font-size: 16px;\"><p style=\"margin-bottom: 1.25rem; font-size: 1rem; line-height: 1.6; box-sizing: inherit; padding: 0px; font-family: inherit; text-rendering: optimizeLegibility; letter-spacing: 1px;\"><strong style=\"box-sizing: inherit; line-height: inherit;\">Note:</strong>&nbsp;Docker automatically generates names for any containers started. We’ll see how to specify your own names a bit later.</p></blockquote><p style=\"margin-bottom: 1.25rem; box-sizing: inherit; padding: 0px; font-size: 16px; line-height: 1.6; text-rendering: optimizeLegibility; color: rgb(5, 14, 26);\">Okay, so we now know it’s running. But is it doing what we asked it to do? To see this we’re going to look inside the container using the&nbsp;<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">docker logs</code>&nbsp;command. Let’s use the container name Docker assigned.</p><pre style=\"padding: 0px; color: rgb(5, 14, 26); margin-bottom: 1.5rem; letter-spacing: normal; box-sizing: inherit; background-color: rgb(255, 255, 255);\"><code class=\"hljs elixir\" style=\"padding: 0.5em; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border: 1px solid rgb(255, 203, 148); box-sizing: inherit; display: block; overflow-x: auto; background: rgb(248, 248, 248);\"><span class=\"hljs-variable\" style=\"box-sizing: inherit; color: rgb(0, 128, 128);\">$ </span>docker logs insane_babbage\nhello world\nhello world\nhello world\n. . .\n</code></pre><p style=\"margin-bottom: 1.25rem; box-sizing: inherit; padding: 0px; font-size: 16px; line-height: 1.6; text-rendering: optimizeLegibility; color: rgb(5, 14, 26);\">The&nbsp;<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">docker logs</code>&nbsp;command looks inside the container and returns its standard output: in this case the output of our command&nbsp;<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">hello world</code>.</p><p style=\"margin-bottom: 1.25rem; box-sizing: inherit; padding: 0px; font-size: 16px; line-height: 1.6; text-rendering: optimizeLegibility; color: rgb(5, 14, 26);\">Awesome! Our daemon is working and we’ve just created our first Dockerized application!</p><p style=\"margin-bottom: 1.25rem; box-sizing: inherit; padding: 0px; font-size: 16px; line-height: 1.6; text-rendering: optimizeLegibility; color: rgb(5, 14, 26);\">Now we’ve established we can create our own containers let’s tidy up after ourselves and stop our detached container. To do this we use the&nbsp;<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">docker stop</code>&nbsp;command.</p><pre style=\"padding: 0px; color: rgb(5, 14, 26); margin-bottom: 1.5rem; letter-spacing: normal; box-sizing: inherit; background-color: rgb(255, 255, 255);\"><code class=\"hljs vbnet\" style=\"padding: 0.5em; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border: 1px solid rgb(255, 203, 148); box-sizing: inherit; display: block; overflow-x: auto; background: rgb(248, 248, 248);\">$ docker <span class=\"hljs-keyword\" style=\"box-sizing: inherit; font-weight: bold;\">stop</span> insane_babbage\ninsane_babbage\n</code></pre><p style=\"margin-bottom: 1.25rem; box-sizing: inherit; padding: 0px; font-size: 16px; line-height: 1.6; text-rendering: optimizeLegibility; color: rgb(5, 14, 26);\">The&nbsp;<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">docker stop</code>&nbsp;command tells Docker to politely stop the running container. If it succeeds it will return the name of the container it has just stopped.</p><p style=\"margin-bottom: 1.25rem; box-sizing: inherit; padding: 0px; font-size: 16px; line-height: 1.6; text-rendering: optimizeLegibility; color: rgb(5, 14, 26);\">Let’s check it worked with the&nbsp;<code style=\"padding: 0.125rem 0.3125rem 0.0625rem; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border-color: rgb(255, 203, 148); box-sizing: inherit; background-color: rgb(248, 248, 248);\">docker ps</code>&nbsp;command.</p><pre style=\"padding: 0px; color: rgb(5, 14, 26); margin-bottom: 1.5rem; letter-spacing: normal; box-sizing: inherit; background-color: rgb(255, 255, 255);\"><code class=\"hljs vim\" style=\"padding: 0.5em; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(51, 51, 51); border: 1px solid rgb(255, 203, 148); box-sizing: inherit; display: block; overflow-x: auto; background: rgb(248, 248, 248);\">$ docker <span class=\"hljs-keyword\" style=\"box-sizing: inherit; font-weight: bold;\">ps</span>\nCONTAINER ID  IMAGE         COMMAND               CREATED        STATUS       PORTS NAMES\n</code></pre><p style=\"margin-bottom: 1.25rem; box-sizing: inherit; padding: 0px; font-size: 16px; line-height: 1.6; text-rendering: optimizeLegibility; color: rgb(5, 14, 26);\">Excellent. Our container has been stopped.</p></h2>","key":6,"id":16,"level":3},"7":{"title":"Docker-compose","key":7,"id":22,"level":4,"ideas":{"1":{"title":"https://docs.docker.com/compose/","key":1,"id":23,"level":0}}},"8":{"title":"Examples of dockerized apps","key":8,"id":24,"level":5,"ideas":{"1":{"title":"https://docs.docker.com/engine/examples/mongodb/","key":1,"id":25,"level":0}}},"2.5":{"title":"docker machine","content":"<b style=\"color: rgb(34, 34, 34); font-family: arial, sans-serif; font-size: 16px; line-height: 19.2px;\">Machine</b><span style=\"color: rgb(34, 34, 34); font-family: arial, sans-serif; font-size: 16px; line-height: 19.2px;\">&nbsp;lets you create&nbsp;</span><b style=\"color: rgb(34, 34, 34); font-family: arial, sans-serif; font-size: 16px; line-height: 19.2px;\">Docker</b><span style=\"color: rgb(34, 34, 34); font-family: arial, sans-serif; font-size: 16px; line-height: 19.2px;\">&nbsp;hosts on your computer, on cloud providers, and inside your own data center. It automatically creates hosts, installs&nbsp;</span><b style=\"color: rgb(34, 34, 34); font-family: arial, sans-serif; font-size: 16px; line-height: 19.2px;\">Docker</b><span style=\"color: rgb(34, 34, 34); font-family: arial, sans-serif; font-size: 16px; line-height: 19.2px;\">&nbsp;on them, then configures the&nbsp;</span><b style=\"color: rgb(34, 34, 34); font-family: arial, sans-serif; font-size: 16px; line-height: 19.2px;\">docker</b><span style=\"color: rgb(34, 34, 34); font-family: arial, sans-serif; font-size: 16px; line-height: 19.2px;\">&nbsp;client to talk to them. A “</span><b style=\"color: rgb(34, 34, 34); font-family: arial, sans-serif; font-size: 16px; line-height: 19.2px;\">machine</b><span style=\"color: rgb(34, 34, 34); font-family: arial, sans-serif; font-size: 16px; line-height: 19.2px;\">” is the combination of a&nbsp;</span><b style=\"color: rgb(34, 34, 34); font-family: arial, sans-serif; font-size: 16px; line-height: 19.2px;\">Docker</b><span style=\"color: rgb(34, 34, 34); font-family: arial, sans-serif; font-size: 16px; line-height: 19.2px;\">&nbsp;host and a configured client.</span>","key":2.5,"id":11,"level":6}}}]