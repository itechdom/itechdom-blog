[{"title":"Concepts","key":0,"id":7,"level":0,"ideas":{"1":{"title":"Basics","content":"<div id=\"wmd-preview-section-34\" class=\"wmd-preview-section preview-content\" style=\"box-sizing: border-box; color: rgb(63, 63, 63); font-family: 'Source Sans Pro', sans-serif; font-size: 18px; line-height: 26.1000003814697px; text-align: justify; outline: none !important; background-color: rgb(246, 246, 246);\"><h3 id=\"regex-basics\" style=\"box-sizing: border-box; font-weight: 300; line-height: 1.1; margin-top: 1.5em; margin-bottom: 1.5em; font-size: 1.7em; text-align: start; outline: none !important;\">Regex Basics</h3><ul style=\"box-sizing: border-box; margin-bottom: 1.1em; outline: none !important;\"><li style=\"box-sizing: border-box; outline: none !important;\">[abc] A single character: a, b or c</li><li style=\"box-sizing: border-box; outline: none !important;\">[^abc] Any single character but a, b, or c</li><li style=\"box-sizing: border-box; outline: none !important;\">[a-z] Any single character in the range a-z</li><li style=\"box-sizing: border-box; outline: none !important;\">[a-zA-Z] Any single character in the range a-z or A-Z</li><li style=\"box-sizing: border-box; outline: none !important;\">[1-9] any number between 1 and 9</li><li style=\"box-sizing: border-box; outline: none !important;\">^ Start of line</li><li style=\"box-sizing: border-box; outline: none !important;\">$ End of line</li><li style=\"box-sizing: border-box; outline: none !important;\">\\A Start of string</li><li style=\"box-sizing: border-box; outline: none !important;\">\\z End of string</li></ul></div><div id=\"wmd-preview-section-35\" class=\"wmd-preview-section preview-content\" style=\"box-sizing: border-box; color: rgb(63, 63, 63); font-family: 'Source Sans Pro', sans-serif; font-size: 18px; line-height: 26.1000003814697px; text-align: justify; outline: none !important; background-color: rgb(246, 246, 246);\"><h3 id=\"shortcuts-meta-characters\" style=\"box-sizing: border-box; font-weight: 300; line-height: 1.1; margin-top: 1.5em; margin-bottom: 1.5em; font-size: 1.7em; text-align: start; outline: none !important;\">Shortcuts (meta characters)</h3><ul style=\"box-sizing: border-box; margin-bottom: 1.1em; outline: none !important;\"><li style=\"box-sizing: border-box; outline: none !important;\">. Any single character</li><li style=\"box-sizing: border-box; outline: none !important;\">\\s Any whitespace character</li><li style=\"box-sizing: border-box; outline: none !important;\">\\S Any non-whitespace character</li><li style=\"box-sizing: border-box; outline: none !important;\">\\d Any digit</li><li style=\"box-sizing: border-box; outline: none !important;\">\\D Any non-digit</li><li style=\"box-sizing: border-box; outline: none !important;\">\\w Any word character (letter, number, underscore)</li><li style=\"box-sizing: border-box; outline: none !important;\">\\W Any non-word character</li><li style=\"box-sizing: border-box; outline: none !important;\">\\b Any word boundary character</li></ul></div><div id=\"wmd-preview-section-36\" class=\"wmd-preview-section preview-content\" style=\"box-sizing: border-box; color: rgb(63, 63, 63); font-family: 'Source Sans Pro', sans-serif; font-size: 18px; line-height: 26.1000003814697px; text-align: justify; outline: none !important; background-color: rgb(246, 246, 246);\"><h3 id=\"groups\" style=\"box-sizing: border-box; font-weight: 300; line-height: 1.1; margin-top: 1.5em; margin-bottom: 1.5em; font-size: 1.7em; text-align: start; outline: none !important;\">Groups</h3><ul style=\"box-sizing: border-box; margin-bottom: 1.1em; outline: none !important;\"><li style=\"box-sizing: border-box; outline: none !important;\">(â€¦) Capture everything enclosed</li><li style=\"box-sizing: border-box; outline: none !important;\">(a|b) a or b</li><li style=\"box-sizing: border-box; outline: none !important;\">? Zero or one of a</li><li style=\"box-sizing: border-box; outline: none !important;\">* Zero or more of a</li><li style=\"box-sizing: border-box; outline: none !important;\">+ One or more of a</li><li style=\"box-sizing: border-box; outline: none !important;\">{3} Exactly 3 of a</li><li style=\"box-sizing: border-box; outline: none !important;\">{3,} 3 or more of a</li><li style=\"box-sizing: border-box; outline: none !important;\">a{3,6} Between 3 and 6 of a</li></ul></div><div id=\"wmd-preview-section-37\" class=\"wmd-preview-section preview-content\" style=\"box-sizing: border-box; color: rgb(63, 63, 63); font-family: 'Source Sans Pro', sans-serif; font-size: 18px; line-height: 26.1000003814697px; text-align: justify; outline: none !important; background-color: rgb(246, 246, 246);\"><h3 id=\"characters-that-needs-to-be-escaped\" style=\"box-sizing: border-box; font-weight: 300; line-height: 1.1; margin-top: 1.5em; margin-bottom: 1.5em; font-size: 1.7em; text-align: start; outline: none !important;\">Characters that needs to be escaped.</h3><ul style=\"box-sizing: border-box; margin-bottom: 1.1em; outline: none !important;\"><li style=\"box-sizing: border-box; outline: none !important;\">They are escaped with a backward slash \\\\</li><li style=\"box-sizing: border-box; outline: none !important;\">Characters are:</li></ul></div><div id=\"wmd-preview-section-38\" class=\"wmd-preview-section preview-content\" style=\"box-sizing: border-box; color: rgb(63, 63, 63); font-family: 'Source Sans Pro', sans-serif; font-size: 18px; line-height: 26.1000003814697px; text-align: justify; outline: none !important; background-color: rgb(246, 246, 246);\"><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: 'Source Code Pro', monospace; font-size: 0.9em; padding: 10px 20px; margin-bottom: 1.1em; line-height: 1.45; word-break: break-word; border: 0px; border-radius: 5px; text-align: start; outline: none !important; background-color: rgba(128, 128, 128, 0.0470588);\"><code class=\" hljs ruby\" style=\"box-sizing: border-box; font-family: 'Source Code Pro', monospace; font-size: inherit; padding: 0.5em; color: rgb(0, 0, 0); border-radius: 0px; display: block; outline: none !important; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">. | ( ) [ ] { } + \\ ^ <span class=\"hljs-variable\" style=\"box-sizing: border-box; outline: none !important;\">$ </span>* ?</code></pre></div>","key":1,"id":8,"level":0},"2":{"title":"Capturing","content":"<div>### capturing</div><div><br></div><div>* We can specify variables in regex that we can refer to later</div><div>* The exampel below stores month, day and year when given a date.</div><div><br></div><div>```ruby</div><div><br></div><div>(?&lt;month&gt;\\d{1,2})\\/(?&lt;day&gt;\\d{1,2})\\/(?&lt;year&gt;\\d{4})</div><div>```</div><div><br></div><div>Then we can do something like this:</div><div>```ruby</div><div>date_string = \"06/11/1985\"</div><div>pattern = /(?&lt;month&gt;\\d{1,2})\\/(?&lt;day&gt;\\d{1,2})\\/(?&lt;year&gt;\\d{4})/</div><div>result = date_string.match(pattern)</div><div># we can now access the days, month and year</div><div>result[:day] #11</div><div>result[:month] #06</div><div>result[:year] #1985</div><div><br></div><div>```</div><div><br></div><div><br></div><div>### exercise</div><div><br></div><div>* Write a pattern that will take a decimal number (ie: 3.4)</div><div>* It captures the number in dollars and cents</div><div>* display the dollars and cents in that number</div><div>* You should modify the previous example</div><div>```ruby</div><div>(?&lt;month&gt;\\d{1,2})\\/(?&lt;day&gt;\\d{1,2})\\/(?&lt;year&gt;\\d{4})</div><div>```</div>","key":2,"id":9,"level":1},"3":{"title":"Ways to use Regex","content":"<div>### Ways to Use Regex in Ruby</div><div><br></div><div>* Match</div><div>* Scan</div><div>* =~</div><div>* Gsub</div><div>* Split</div><div><br></div><div>```ruby</div><div><br></div><div>a = /a/</div><div><br></div><div>a.class # Regexp</div><div><br></div><div>myString = \"A woman once said. A man once said. A child once said\"</div><div><br></div><div>match = myString.match(a) #this will return a</div><div><br></div><div>match = myString.scan(a) #this will return [\"a\", \"a\", \"a\", \"a\", \"a\"]</div><div><br></div><div>match = myString.gsub(a,\"b\") #this will replace all a(s) with b, leaving behind capital A</div><div><br></div><div>myString =~ a #return the index of the first occurance&nbsp;</div><div><br></div><div>match = myString.split(a) # split a string by a(s)</div><div><br></div><div>```</div>","key":3,"id":10,"level":2},"4":{"title":"You need to escape special chars to make them literal","content":"Similar to the DOT char. if you want to the actual . character (as in at the end of a sentence). Then you must escape it with \\","key":4,"id":17,"level":3,"ideas":{}},"5":{"title":"Optional element","key":5,"id":19,"level":4,"ideas":{"1":{"title":"?","key":1,"id":20,"level":0},"2":{"title":"http://regex.learncodethehardway.org/book/ex8.html","key":2,"id":21,"level":1}}},"6":{"title":"Repitition","content":"<p style=\"box-sizing: border-box; margin-bottom: 17px; padding: 0px; direction: ltr; font-family: 'Helvetica Neue', Helvetica, Helvetica, Arial, sans-serif; line-height: 1.6; color: rgb(34, 34, 34);\">The regex symbol for \"one-or-more\" is&nbsp;<tt class=\"docutils literal\" style=\"box-sizing: border-box;\">+</tt>&nbsp;and for \"zero-or-more\" is&nbsp;<tt class=\"docutils literal\" style=\"box-sizing: border-box;\">*</tt>. Just like with the \"optional\" symbol&nbsp;<tt class=\"docutils literal\" style=\"box-sizing: border-box;\">?</tt>&nbsp;you place it after the regex symbol or character set to repeat and that's it.</p>","key":6,"id":22,"level":5,"ideas":{"1":{"title":"http://regex.learncodethehardway.org/book/ex9.html","key":1,"id":23,"level":0}}},"7":{"title":"More advanced","content":"<ul class=\"simple\" style=\"box-sizing: border-box; margin-bottom: 17px; margin-left: 0px; direction: ltr; line-height: 1.6; list-style-position: outside; color: rgb(34, 34, 34); font-family: 'Helvetica Neue', Helvetica, Helvetica, Arial, sans-serif;\"><li style=\"box-sizing: border-box; margin: 0px 0px 0px 20px; padding: 0px; direction: ltr;\">Limit repetition in more complex ways.</li><li style=\"box-sizing: border-box; margin: 0px 0px 0px 20px; padding: 0px; direction: ltr;\">Group expressions.</li><li style=\"box-sizing: border-box; margin: 0px 0px 0px 20px; padding: 0px; direction: ltr;\">Alternate between one or more expressions.</li><li style=\"box-sizing: border-box; margin: 0px 0px 0px 20px; padding: 0px; direction: ltr;\">Special regex engine modifications for more complex tasks.</li></ul>","key":7,"id":24,"level":6,"ideas":{"1":{"title":"limiting the number","content":"<ul class=\"simple\" style=\"box-sizing: border-box; margin-bottom: 17px; margin-left: 0px; direction: ltr; line-height: 1.6; list-style-position: outside; color: rgb(34, 34, 34); font-family: 'Helvetica Neue', Helvetica, Helvetica, Arial, sans-serif;\"><li style=\"box-sizing: border-box; margin: 0px 0px 0px 20px; padding: 0px; direction: ltr;\">If you put&nbsp;<tt class=\"docutils literal\" style=\"box-sizing: border-box;\">{X}</tt>&nbsp;in the same place you'd put a&nbsp;<tt class=\"docutils literal\" style=\"box-sizing: border-box;\">+</tt>&nbsp;(after something to repeat) then it will make sure that it is repeated&nbsp;<tt class=\"docutils literal\" style=\"box-sizing: border-box;\">X</tt>&nbsp;times.</li><li style=\"box-sizing: border-box; margin: 0px 0px 0px 20px; padding: 0px; direction: ltr;\">If you put&nbsp;<tt class=\"docutils literal\" style=\"box-sizing: border-box;\">{X,Y}</tt>&nbsp;then it will make sure it repeates at least X times, but not more than Y times.</li><li style=\"box-sizing: border-box; margin: 0px 0px 0px 20px; padding: 0px; direction: ltr;\">If you put a&nbsp;<tt class=\"docutils literal\" style=\"box-sizing: border-box;\">?</tt>&nbsp;after any of the repetition symbols it means \"non-greedy\". This is unfortunate because&nbsp;<tt class=\"docutils literal\" style=\"box-sizing: border-box;\">?</tt>&nbsp;also means \"optional\" but just remember that placing it after repetition means \"non-greedy\".</li></ul>","key":1,"id":25,"level":0,"ideas":{"1":{"title":"http://regex.learncodethehardway.org/book/ex10.html","key":1,"id":26,"level":0},"2":{"title":"example","content":"[0-9]{2}-[0-9]{2}-[0-9]{2,4}?<div><br></div><div>The way to explain \"non-greedy\" is simply that most regex engines try to match repetition to the biggest part of the corpus text possible. If you run into situations where you're matching too much with repetition, then you can use ? to tell it to match the smallest repetition possible.<br></div>","key":2,"id":27,"level":1}}},"2":{"title":"http://regex.learncodethehardway.org/book/ex11.html","key":2,"id":28,"level":1}}}}},{"title":"When not to use them","key":1,"id":13,"level":1,"ideas":{"1":{"title":"Infamous mail address Regex","key":1,"id":14,"level":0,"ideas":{"1":{"title":"Use lexer instead","key":1,"id":16,"level":0}}}}},{"title":"Resources","key":2,"id":3,"level":2,"ideas":{"1":{"title":"http://regex.learncodethehardway.org/book/","key":1,"id":4,"level":0,"ideas":{"1":{"title":"Regex the hard way","key":1,"id":5,"level":0}}},"2":{"title":"Follow Along exercises","key":2,"id":6,"level":1},"3":{"title":"http://www.rexegg.com/regex-best-trick.html","key":3,"id":11,"level":2,"ideas":{"1":{"title":"Best Regex trick","key":1,"id":12,"level":0}}}}}]