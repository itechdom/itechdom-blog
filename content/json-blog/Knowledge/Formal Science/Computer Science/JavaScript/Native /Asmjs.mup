[{"title":"Purpose","key":0,"id":224,"level":0,"ideas":{"1":{"title":"Faster","key":1,"id":225,"level":0},"2":{"title":"Statically typed","key":2,"id":226,"level":1},"3":{"title":"Access to standard libraries and low level functionality","key":3,"id":227,"level":2,"ideas":{"1":{"title":"stdlib","key":1,"id":229,"level":0}}}}},{"title":"resources","key":1,"id":238,"level":1,"ideas":{"1":{"title":"https://github.com/dherman/asm.js/","key":1,"id":215,"level":0,"ideas":{"1":{"title":"github repo","key":1,"id":216,"level":0}}},"2":{"title":"http://asmjs.org/","key":2,"id":214,"level":1}}},{"title":"Concepts","key":2,"id":217,"level":2,"ideas":{"3":{"title":"Linking","content":"Depending on your implementation: compilation or interpretation might happen (compilation is more optimized).","key":3,"id":222,"level":0},"5":{"title":"types","key":5,"id":230,"level":1,"ideas":{"1":{"title":"http://asmjs.org/spec/latest/#types","key":1,"id":231,"level":0},"2":{"title":"types that escape to external javascript","key":2,"id":232,"level":1},"3":{"title":"coercion","key":3,"id":233,"level":2}}},"6":{"title":"Bitwise operations","content":"<strong style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; line-height: 21px;\">Bitwise operators</strong><span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; line-height: 21px;\">&nbsp;treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal&nbsp;</span><code style=\"margin: 0px; padding: 0px; border: 0px; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(77, 78, 83); font-size: 14px; line-height: 21px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\" title=\"/en-US/docs/JavaScript/Reference/Global_Objects/Number\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(0, 149, 221);\">numbers</a></code><span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; line-height: 21px;\">. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.</span><div><span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; line-height: 21px;\"><br></span></div><div><span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; line-height: 21px;\">So they look at anything as binary, but eventually (and always) will return numbers.</span></div>","key":6,"id":234,"level":2,"ideas":{"1":{"title":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators","key":1,"id":235,"level":0,"ideas":{"1":{"title":"operators","content":"<p style=\"margin-bottom: 24px; padding: 0px; border: 0px; color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; line-height: 21px;\">The following table summarizes JavaScript's bitwise operators:</p><table class=\"standard-table\" style=\"margin: 0px 0px 24px; padding: 0px; border: 2px solid rgb(255, 255, 255); color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; line-height: 21px; background-color: rgb(255, 255, 255);\"><tbody style=\"margin: 0px; padding: 0px; border: 0px;\"><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><th style=\"margin: 0px; padding: 2px 8px 4px; border-width: 2px; border-style: solid; border-color: rgb(255, 255, 255) rgb(255, 255, 255) rgb(212, 221, 228); font-style: inherit; font-family: 'Open Sans Light', Helvetica, Arial, sans-serif; background: rgba(212, 221, 228, 0.498039);\">Operator</th><th style=\"margin: 0px; padding: 2px 8px 4px; border-width: 2px; border-style: solid; border-color: rgb(255, 255, 255) rgb(255, 255, 255) rgb(212, 221, 228); font-style: inherit; font-family: 'Open Sans Light', Helvetica, Arial, sans-serif; background: rgba(212, 221, 228, 0.498039);\">Usage</th><th style=\"margin: 0px; padding: 2px 8px 4px; border-width: 2px; border-style: solid; border-color: rgb(255, 255, 255) rgb(255, 255, 255) rgb(212, 221, 228); font-style: inherit; font-family: 'Open Sans Light', Helvetica, Arial, sans-serif; background: rgba(212, 221, 228, 0.498039);\">Description</th></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_AND\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(0, 149, 221);\">Bitwise AND</a></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\"><code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a &amp; b</code></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">Returns a one in each bit position for which the corresponding bits of both operands are ones.</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_OR\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(0, 149, 221);\">Bitwise OR</a></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\"><code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a | b</code></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\">Returns a one in each bit position for which the corresponding bits of either or both operands are ones.</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_XOR\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(0, 149, 221);\">Bitwise XOR</a></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\"><code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a ^ b</code></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">Returns a one in each bit position for which the corresponding bits of either but not both operands are ones.</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_NOT\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(0, 149, 221);\">Bitwise NOT</a></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\"><code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">~ a</code></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\">Inverts the bits of its operand.</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Left_shift\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(0, 149, 221);\">Left shift</a></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\"><code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a &lt;&lt; b</code></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">Shifts&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a</code>&nbsp;in binary representation&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">b</code>&nbsp;(&lt; 32) bits to the left, shifting in zeroes from the right.</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Right_shift\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(0, 149, 221);\">Sign-propagating right shift</a></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\"><code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a &gt;&gt; b</code></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\">Shifts&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a</code>&nbsp;in binary representation&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">b</code>&nbsp;(&lt; 32) bits to the right, discarding bits shifted off.</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Unsigned_right_shift\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(0, 149, 221);\">Zero-fill right shift</a></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\"><code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a &gt;&gt;&gt; b</code></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">Shifts&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a</code>&nbsp;in binary representation&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">b</code>&nbsp;(&lt; 32) bits to the right, discarding bits shifted off, and shifting in zeroes from the left.</td></tr></tbody></table><br><div>Example:</div><div><br></div><div><h3 id=\"(Bitwise_AND)\" style=\"margin-top: 0px; margin-bottom: 12px; padding: 0px; border: 0px; word-wrap: break-word; font-family: 'Open Sans', Arial, sans-serif; font-weight: 200; line-height: 1; font-size: 1.71428571428571rem; letter-spacing: -0.021em; color: rgb(77, 78, 83);\"><a name=\"Bitwise_AND\" style=\"margin: 0px; padding: 0px; border: 0px; color: inherit;\">&amp; (Bitwise AND)</a></h3><p style=\"margin-bottom: 24px; padding: 0px; border: 0px; color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; line-height: 21px;\">Performs the AND operation on each pair of bits.&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a</code>&nbsp;AND&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">b</code>&nbsp;yields 1 only if both&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a</code>&nbsp;and&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">b</code>&nbsp;are 1. The truth table for the AND operation is:</p><table class=\"standard-table\" style=\"margin: 0px 0px 24px; padding: 0px; border: 2px solid rgb(255, 255, 255); color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; line-height: 21px; background-color: rgb(255, 255, 255);\"><tbody style=\"margin: 0px; padding: 0px; border: 0px;\"><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td class=\"header\" style=\"margin: 0px; padding: 2px 8px 4px; border-width: 2px; border-style: solid; border-color: rgb(255, 255, 255) rgb(255, 255, 255) rgb(212, 221, 228); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; font-family: 'Open Sans Light', Helvetica, Arial, sans-serif; font-weight: 700; background: rgba(212, 221, 228, 0.247059);\">a</td><td class=\"header\" style=\"margin: 0px; padding: 2px 8px 4px; border-width: 2px; border-style: solid; border-color: rgb(255, 255, 255) rgb(255, 255, 255) rgb(212, 221, 228); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; font-family: 'Open Sans Light', Helvetica, Arial, sans-serif; font-weight: 700; background: rgba(212, 221, 228, 0.247059);\">b</td><td class=\"header\" style=\"margin: 0px; padding: 2px 8px 4px; border-width: 2px; border-style: solid; border-color: rgb(255, 255, 255) rgb(255, 255, 255) rgb(212, 221, 228); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; font-family: 'Open Sans Light', Helvetica, Arial, sans-serif; font-weight: 700; background: rgba(212, 221, 228, 0.247059);\">a AND b</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">0</td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">0</td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">0</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\">0</td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\">1</td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\">0</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">1</td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">0</td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">0</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\">1</td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\">1</td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\">1<br></td></tr></tbody></table><br></div><div><pre class=\" language-html\" data-number=\"\" style=\"margin-bottom: 20px; padding: 1em 0px 1em 30px; border-width: 0px 0px 0px 5px; border-left-color: rgb(85, 138, 187); font-size: 14px; line-height: 19px; color: rgb(77, 78, 83); overflow: auto; font-family: Consolas, Monaco, 'Andale Mono', monospace; direction: ltr; white-space: pre; word-break: normal; tab-size: 4; position: relative; text-shadow: none; background: url(https://developer.cdn.mozilla.net/media/img/blueprint-dark.png) 50% 0% rgb(250, 251, 252);\"><code class=\" language-html\" style=\"margin: 0px; font-weight: inherit; font-family: Consolas, Monaco, 'Andale Mono', monospace; direction: ltr; white-space: pre; word-spacing: normal; word-break: normal; tab-size: 4; color: rgb(77, 78, 83); text-shadow: none;\">.    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 &amp; 9 (base 10) = 00000000000000000000000000001000 (base 2) = 8 (base 10)</code></pre></div>","key":1,"id":237,"level":0}}}}}}},{"title":"New Standard","key":3,"id":239,"level":3,"ideas":{"1":{"title":"http://www.2ality.com/2015/06/web-assembly.html","key":1,"id":241,"level":0,"ideas":{"1":{"title":"Web Assembly and why","key":1,"id":242,"level":0}}}}}]