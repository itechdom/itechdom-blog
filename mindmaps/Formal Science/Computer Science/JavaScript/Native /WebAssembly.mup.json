{
  "title": "WebAssembly",
  "id": 1,
  "formatVersion": 2,
  "ideas": {
    "15": {
      "title": "Purpose",
      "id": 224,
      "ideas": {
        "1": {
          "title": "Faster",
          "id": 225
        },
        "2": {
          "title": "Statically typed",
          "id": 226
        },
        "3": {
          "title": "Access to standard libraries and low level functionality",
          "id": 227,
          "ideas": {
            "1": {
              "title": "stdlib",
              "id": 229
            }
          }
        }
      },
      "attr": {
        "style": {},
        "collapsed": true
      }
    },
    "17": {
      "title": "resources",
      "id": 238,
      "ideas": {
        "1": {
          "title": "https://github.com/dherman/asm.js/",
          "id": 215,
          "ideas": {
            "1": {
              "title": "github repo",
              "id": 216
            }
          },
          "attr": {
            "style": {}
          }
        },
        "2": {
          "title": "http://asmjs.org/",
          "id": 214,
          "attr": {
            "style": {}
          }
        },
        "3": {
          "title": "https://github.com/WebAssembly",
          "id": 243
        },
        "4": {
          "title": "https://developer.mozilla.org/en-US/demos/detail/bananabread",
          "id": 244,
          "ideas": {
            "1": {
              "title": "C/C++ game written in ASM.JS",
              "id": 246
            }
          }
        },
        "5": {
          "title": "http://kripken.github.io/emscripten-site/",
          "id": 247,
          "ideas": {
            "1": {
              "title": "Compile C/C++ to asm.js project",
              "id": 248
            }
          }
        },
        "6": {
          "title": "https://kripken.github.io/talks/wasm.html#/14",
          "id": 249,
          "ideas": {
            "1": {
              "title": "Slides explaining the process of converting javascript to asm.js through ecmascripten",
              "id": 272
            }
          }
        },
        "7": {
          "title": "https://hacks.mozilla.org/2015/12/compiling-to-webassembly-its-happening/",
          "id": 273
        }
      }
    },
    "-1": {
      "title": "Concepts",
      "id": 217,
      "ideas": {
        "3": {
          "title": "Linking",
          "id": 222,
          "attr": {
            "attachment": {
              "contentType": "text/html",
              "content": "Depending on your implementation: compilation or interpretation might happen (compilation is more optimized)."
            },
            "style": {}
          }
        },
        "5": {
          "title": "types",
          "id": 230,
          "ideas": {
            "1": {
              "title": "http://asmjs.org/spec/latest/#types",
              "id": 231
            },
            "2": {
              "title": "types that escape to external javascript",
              "id": 232
            },
            "3": {
              "title": "coercion",
              "id": 233
            }
          }
        },
        "6": {
          "title": "Bitwise operations",
          "id": 234,
          "ideas": {
            "1": {
              "title": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators",
              "id": 235,
              "ideas": {
                "1": {
                  "title": "operators",
                  "id": 237,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<p style=\"margin-bottom: 24px; padding: 0px; border: 0px; color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; line-height: 21px;\">The following table summarizes JavaScript's bitwise operators:</p><table class=\"standard-table\" style=\"margin: 0px 0px 24px; padding: 0px; border: 2px solid rgb(255, 255, 255); color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; line-height: 21px; background-color: rgb(255, 255, 255);\"><tbody style=\"margin: 0px; padding: 0px; border: 0px;\"><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><th style=\"margin: 0px; padding: 2px 8px 4px; border-width: 2px; border-style: solid; border-color: rgb(255, 255, 255) rgb(255, 255, 255) rgb(212, 221, 228); font-style: inherit; font-family: 'Open Sans Light', Helvetica, Arial, sans-serif; background: rgba(212, 221, 228, 0.498039);\">Operator</th><th style=\"margin: 0px; padding: 2px 8px 4px; border-width: 2px; border-style: solid; border-color: rgb(255, 255, 255) rgb(255, 255, 255) rgb(212, 221, 228); font-style: inherit; font-family: 'Open Sans Light', Helvetica, Arial, sans-serif; background: rgba(212, 221, 228, 0.498039);\">Usage</th><th style=\"margin: 0px; padding: 2px 8px 4px; border-width: 2px; border-style: solid; border-color: rgb(255, 255, 255) rgb(255, 255, 255) rgb(212, 221, 228); font-style: inherit; font-family: 'Open Sans Light', Helvetica, Arial, sans-serif; background: rgba(212, 221, 228, 0.498039);\">Description</th></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_AND\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(0, 149, 221);\">Bitwise AND</a></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\"><code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a &amp; b</code></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">Returns a one in each bit position for which the corresponding bits of both operands are ones.</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_OR\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(0, 149, 221);\">Bitwise OR</a></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\"><code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a | b</code></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\">Returns a one in each bit position for which the corresponding bits of either or both operands are ones.</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_XOR\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(0, 149, 221);\">Bitwise XOR</a></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\"><code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a ^ b</code></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">Returns a one in each bit position for which the corresponding bits of either but not both operands are ones.</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_NOT\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(0, 149, 221);\">Bitwise NOT</a></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\"><code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">~ a</code></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\">Inverts the bits of its operand.</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Left_shift\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(0, 149, 221);\">Left shift</a></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\"><code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a &lt;&lt; b</code></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">Shifts&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a</code>&nbsp;in binary representation&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">b</code>&nbsp;(&lt; 32) bits to the left, shifting in zeroes from the right.</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Right_shift\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(0, 149, 221);\">Sign-propagating right shift</a></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\"><code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a &gt;&gt; b</code></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\">Shifts&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a</code>&nbsp;in binary representation&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">b</code>&nbsp;(&lt; 32) bits to the right, discarding bits shifted off.</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Unsigned_right_shift\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(0, 149, 221);\">Zero-fill right shift</a></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\"><code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a &gt;&gt;&gt; b</code></td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">Shifts&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a</code>&nbsp;in binary representation&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">b</code>&nbsp;(&lt; 32) bits to the right, discarding bits shifted off, and shifting in zeroes from the left.</td></tr></tbody></table><br><div>Example:</div><div><br></div><div><h3 id=\"(Bitwise_AND)\" style=\"margin-top: 0px; margin-bottom: 12px; padding: 0px; border: 0px; word-wrap: break-word; font-family: 'Open Sans', Arial, sans-serif; font-weight: 200; line-height: 1; font-size: 1.71428571428571rem; letter-spacing: -0.021em; color: rgb(77, 78, 83);\"><a name=\"Bitwise_AND\" style=\"margin: 0px; padding: 0px; border: 0px; color: inherit;\">&amp; (Bitwise AND)</a></h3><p style=\"margin-bottom: 24px; padding: 0px; border: 0px; color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; line-height: 21px;\">Performs the AND operation on each pair of bits.&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a</code>&nbsp;AND&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">b</code>&nbsp;yields 1 only if both&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">a</code>&nbsp;and&nbsp;<code style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace;\">b</code>&nbsp;are 1. The truth table for the AND operation is:</p><table class=\"standard-table\" style=\"margin: 0px 0px 24px; padding: 0px; border: 2px solid rgb(255, 255, 255); color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; line-height: 21px; background-color: rgb(255, 255, 255);\"><tbody style=\"margin: 0px; padding: 0px; border: 0px;\"><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td class=\"header\" style=\"margin: 0px; padding: 2px 8px 4px; border-width: 2px; border-style: solid; border-color: rgb(255, 255, 255) rgb(255, 255, 255) rgb(212, 221, 228); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; font-family: 'Open Sans Light', Helvetica, Arial, sans-serif; font-weight: 700; background: rgba(212, 221, 228, 0.247059);\">a</td><td class=\"header\" style=\"margin: 0px; padding: 2px 8px 4px; border-width: 2px; border-style: solid; border-color: rgb(255, 255, 255) rgb(255, 255, 255) rgb(212, 221, 228); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; font-family: 'Open Sans Light', Helvetica, Arial, sans-serif; font-weight: 700; background: rgba(212, 221, 228, 0.247059);\">b</td><td class=\"header\" style=\"margin: 0px; padding: 2px 8px 4px; border-width: 2px; border-style: solid; border-color: rgb(255, 255, 255) rgb(255, 255, 255) rgb(212, 221, 228); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; font-family: 'Open Sans Light', Helvetica, Arial, sans-serif; font-weight: 700; background: rgba(212, 221, 228, 0.247059);\">a AND b</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">0</td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">0</td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">0</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\">0</td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\">1</td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\">0</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">1</td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">0</td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.14902);\">0</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\">1</td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\">1</td><td style=\"margin: 0px; padding: 6px 8px; border: 2px solid rgb(255, 255, 255); box-shadow: rgba(212, 221, 228, 0.498039) 0px -1px 0px 0px inset; background-color: rgba(212, 221, 228, 0.247059);\">1<br></td></tr></tbody></table><br></div><div><pre class=\" language-html\" data-number=\"\" style=\"margin-bottom: 20px; padding: 1em 0px 1em 30px; border-width: 0px 0px 0px 5px; border-left-color: rgb(85, 138, 187); font-size: 14px; line-height: 19px; color: rgb(77, 78, 83); overflow: auto; font-family: Consolas, Monaco, 'Andale Mono', monospace; direction: ltr; white-space: pre; word-break: normal; tab-size: 4; position: relative; text-shadow: none; background: url(https://developer.cdn.mozilla.net/media/img/blueprint-dark.png) 50% 0% rgb(250, 251, 252);\"><code class=\" language-html\" style=\"margin: 0px; font-weight: inherit; font-family: Consolas, Monaco, 'Andale Mono', monospace; direction: ltr; white-space: pre; word-spacing: normal; word-break: normal; tab-size: 4; color: rgb(77, 78, 83); text-shadow: none;\">.    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 &amp; 9 (base 10) = 00000000000000000000000000001000 (base 2) = 8 (base 10)</code></pre></div>"
                    },
                    "style": {}
                  }
                }
              }
            }
          },
          "attr": {
            "attachment": {
              "contentType": "text/html",
              "content": "<strong style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; line-height: 21px;\">Bitwise operators</strong><span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; line-height: 21px;\">&nbsp;treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal&nbsp;</span><code style=\"margin: 0px; padding: 0px; border: 0px; font-family: Consolas, 'Liberation Mono', Courier, monospace; color: rgb(77, 78, 83); font-size: 14px; line-height: 21px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\" title=\"/en-US/docs/JavaScript/Reference/Global_Objects/Number\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(0, 149, 221);\">numbers</a></code><span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; line-height: 21px;\">. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.</span><div><span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; line-height: 21px;\"><br></span></div><div><span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; line-height: 21px;\">So they look at anything as binary, but eventually (and always) will return numbers.</span></div>"
            },
            "style": {}
          }
        }
      },
      "attr": {
        "style": {},
        "collapsed": true
      }
    },
    "-2": {
      "title": "New Standard",
      "id": 239,
      "ideas": {
        "1": {
          "title": "http://www.2ality.com/2015/06/web-assembly.html",
          "id": 241,
          "ideas": {
            "1": {
              "title": "Web Assembly and why",
              "id": 242
            }
          }
        }
      },
      "attr": {
        "collapsed": true,
        "style": {}
      }
    }
  },
  "links": [],
  "attr": {
    "attachment": {
      "contentType": "text/html",
      "content": "Welcome to GDI's intro to Javascript. My name is \"Sam\" it's Osama Alghanmi and with me is Pedro Meza. We work for Charter communication doing Javascript.&nbsp;<div><br></div><div><br></div><div><b>Figure out a group activity that breaks the ice: I think that introduction first and then for 15 mins we talk to each other in a group of (a number here depending on the number of students).&nbsp;</b></div><div><b><br></b></div><div><b>\"This will enable us to break that first barrier\"</b></div><div><b><br></b></div><div><b><br></b></div>"
    },
    "style": {}
  }
}