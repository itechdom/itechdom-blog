{
  "title": "RxJS.presentation",
  "id": 1,
  "formatVersion": 2,
  "ideas": {
    "28": {
      "title": "Resources",
      "id": 179,
      "ideas": {
        "1": {
          "title": "1.book",
          "id": 181,
          "ideas": {},
          "attr": {
            "position": [
              102,
              -108,
              1
            ],
            "style": {},
            "attachment": {
              "contentType": "text/html",
              "content": "<span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\">http://xgrommx.github.io/rx-book/</span>"
            }
          }
        },
        "2": {
          "title": "2.Slidedeck for explaining RxJS",
          "id": 223,
          "attr": {
            "style": {},
            "attachment": {
              "contentType": "text/html",
              "content": "<span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\">http://channikhabra.github.io/frp-with-rxjs-jschannel-conf/#/</span>"
            }
          },
          "ideas": {}
        },
        "5": {
          "title": "4.node.js examples with rxjs",
          "id": 257,
          "attr": {
            "style": {},
            "attachment": {
              "contentType": "text/html",
              "content": "<span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\">https://blog.risingstack.com/functional-reactive-programming-with-the-power-of-nodejs-streams/</span>"
            }
          },
          "ideas": {}
        }
      },
      "attr": {
        "style": {},
        "position": [
          196.5,
          73,
          34
        ],
        "collapsed": true
      }
    },
    "38": {
      "title": "A proposition for a frameworkless framework with Rxjs",
      "id": 291,
      "attr": {
        "style": {}
      }
    },
    "10.5": {
      "title": "Marble Diagrams, What?!",
      "id": 285,
      "attr": {
        "style": {},
        "attachment": {
          "contentType": "text/html",
          "content": "<span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\">Is it a children's game?</span>"
        }
      },
      "ideas": {}
    },
    "5.25": {
      "title": "Let's look at an example with Rxjs ",
      "id": 270,
      "attr": {
        "style": {}
      },
      "ideas": {}
    },
    "2.625": {
      "title": "What's RxJS",
      "id": 268,
      "attr": {
        "style": {},
        "position": [
          163.5,
          -209,
          36
        ],
        "collapsed": true
      },
      "ideas": {
        "1": {
          "title": "1.Developed my Microsoft",
          "id": 271,
          "attr": {
            "style": {}
          }
        },
        "2": {
          "title": "2.Functional Goodness",
          "id": 273,
          "ideas": {},
          "attr": {
            "style": {},
            "attachment": {
              "contentType": "text/html",
              "content": "<ul><li>filter</li><li>map</li><li>aaaaand immutable</li></ul>"
            }
          }
        },
        "3": {
          "title": "4.Observables",
          "id": 145,
          "ideas": {},
          "attr": {
            "style": {},
            "attachment": {
              "contentType": "text/html",
              "content": "<span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\">Maintains a list of objects (observers) and notifies them when the event happens</span><div><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\"><br></span></div><div><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\">http://xgrommx.github.io/rx-book/content/observable/index.html</span><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\"><br></span></div>"
            }
          }
        },
        "3.5": {
          "title": "5.Everything is a Stream!",
          "id": 287,
          "attr": {
            "style": {},
            "attachment": {
              "contentType": "text/html",
              "content": "<div>&lt;img src=\"http://i.imgur.com/AIimQ8C.jpg\" alt=\"Mantra\"&gt;<br><div><br></div><div><ul><li>A stream is an evented data</li><li><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\">http://xgrommx.github.io/rx-book/content/guidelines/introduction/index.html</span><br></li></ul></div></div>"
            }
          }
        },
        "9.75": {
          "title": "6.Node.js streams vs. Event Emitter",
          "id": 258,
          "attr": {
            "attachment": {
              "contentType": "text/html",
              "content": "<div><span style=\"color: rgb(34, 36, 38); font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; font-size: 13px; line-height: 16.9px;\">You are correct that Rx streams and EventEmitter are very similar, both are implementations of the Observer pattern.</span></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\"><br></span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">The difference is that Rx contains functions for transforming and combining event streams. Imagine for instance that we want to delay each \"response event\" by 2 seconds. With EventEmitter, you would have to subscribe to that, and manually make a timeout:</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\"><br></span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">eventEmitter.on('response', function(res) {</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">&nbsp; &nbsp; setTimeout(function() { /* handle res */ }, 2000);</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">});</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">With Rx, you can create a new event stream which is simply the original stream applied to the delay function:</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\"><br></span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">responseStream.delay(2000).subscribe(function(res) {</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">&nbsp; &nbsp; /* handle res */</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">});</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">delay() is a simple function, and one of the many others available. There are so many different ways of modifying streams, that it becomes possible to program a lot of application logic just by transforming streams with all the possible functions, instead of relying on low-level logic such as setTimeout.</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\"><br></span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">Also check out this visual and interactive exploration of those functions.</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\"><br></span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\"><br></span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">Node.js reactive extension plugin</span></font></div><div><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\">https://github.com/Reactive-Extensions/rx-node/blob/master/doc/api/nodejs.md</span><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\"><br></span></font></div>"
            },
            "style": {}
          },
          "ideas": {}
        },
        "2.5": {
          "title": "3.What about Promises? ok",
          "id": 295,
          "attr": {
            "style": {}
          }
        },
        "10.75": {
          "title": "7.Observers",
          "attr": {
            "style": {},
            "attachment": {
              "contentType": "text/html",
              "content": "<div><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\">This is a link</span></div><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\"><div><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\"><br></span></div>http://xgrommx.github.io/rx-book/content/observer/index.html</span>"
            }
          },
          "ideas": {},
          "id": 296
        }
      }
    }
  },
  "links": [],
  "attr": {
    "style": {}
  }
}