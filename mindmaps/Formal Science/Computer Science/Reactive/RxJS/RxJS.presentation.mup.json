{
  "title": "RxJS.presentation",
  "id": 1,
  "formatVersion": 2,
  "ideas": {
    "28": {
      "title": "Resources",
      "id": 179,
      "ideas": {
        "1": {
          "title": "book",
          "id": 181,
          "ideas": {
            "1": {
              "title": "http://xgrommx.github.io/rx-book/",
              "id": 182
            }
          },
          "attr": {
            "position": [
              102,
              -108,
              1
            ],
            "style": {}
          }
        },
        "2": {
          "title": "http://channikhabra.github.io/frp-with-rxjs-jschannel-conf/#/",
          "id": 222,
          "ideas": {
            "1": {
              "title": "Slidedeck for explaining RxJS",
              "id": 223
            }
          }
        },
        "3": {
          "title": "Examples",
          "id": 253,
          "ideas": {
            "1": {
              "title": "https://github.com/Reactive-Extensions/RxJS/tree/master/examples",
              "id": 254,
              "ideas": {
                "1": {
                  "title": "main github repo",
                  "id": 255
                }
              }
            }
          }
        },
        "4": {
          "title": "https://blog.risingstack.com/functional-reactive-programming-with-the-power-of-nodejs-streams/",
          "id": 256,
          "ideas": {
            "1": {
              "title": "node.js examples with rxjs",
              "id": 257,
              "attr": {
                "style": {}
              }
            }
          }
        }
      },
      "attr": {
        "style": {},
        "collapsed": true,
        "position": [
          196.5,
          73,
          34
        ]
      }
    },
    "38": {
      "title": "A proposition for a frameworkless framework with Rxjs",
      "id": 291,
      "attr": {
        "style": {}
      }
    },
    "17.5": {
      "title": "Not Covered",
      "id": 284,
      "attr": {
        "style": {},
        "position": [
          186.5,
          -11,
          35
        ],
        "collapsed": true
      },
      "ideas": {
        "1": {
          "title": "Schedulers",
          "id": 228,
          "ideas": {
            "1": {
              "title": "http://xgrommx.github.io/rx-book/content/schedulers/index.html",
              "id": 233,
              "ideas": {
                "1": {
                  "title": "API",
                  "id": 245
                }
              }
            },
            "2": {
              "title": "http://xgrommx.github.io/rx-book/content/getting_started_with_rxjs/scheduling_and_concurrency.html",
              "id": 244,
              "ideas": {
                "1": {
                  "title": "Explanation",
                  "id": 246
                }
              }
            }
          },
          "attr": {
            "style": {},
            "collapsed": true
          }
        },
        "2": {
          "title": "Subjects",
          "id": 229,
          "ideas": {
            "1": {
              "title": "http://xgrommx.github.io/rx-book/content/subjects/index.html",
              "id": 234,
              "ideas": {
                "1": {
                  "title": "API",
                  "id": 243
                }
              }
            },
            "2": {
              "title": "http://xgrommx.github.io/rx-book/content/getting_started_with_rxjs/subjects.html",
              "id": 241,
              "ideas": {
                "1": {
                  "title": "Explanation",
                  "id": 242
                }
              }
            },
            "3": {
              "title": "Acts as a proxy, takes a source and emits it to its subscribers",
              "id": 247
            },
            "4": {
              "title": "Nice Example",
              "id": 248,
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "<p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">The following example illustrates the proxy and broadcast nature of a Subject. We first create a source sequence which produces an integer every 1 second. We then create a Subject, and pass it as an observer to the source so that it will receive all the values pushed out by this source sequence. After that, we create another two subscriptions, this time with the subject as the source. The subSubject1 and subSubject2 subscriptions will then receive any value passed down (from the source) by the Subject.</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">&lt;pre&gt;</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">&lt;code&gt;</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">// Every second</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">var source = Rx.Observable.interval(1000);</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">var subject = new Rx.Subject();</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">var subSource = source.subscribe(subject);</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">var subSubject1 = subject.subscribe(</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">&nbsp; &nbsp; x =&gt; console.log('Value published to observer #1: ' + x),</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">&nbsp; &nbsp; e =&gt; console.log('onError: ' + e.message),</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">&nbsp; &nbsp; () =&gt; console.log('onCompleted'));</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">var subSubject2 = subject.subscribe(</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">&nbsp;x =&gt; console.log('Value published to observer #2: ' + x),</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">&nbsp; &nbsp; e =&gt; console.log('onError: ' + e.message),</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">&nbsp; &nbsp; () =&gt; console.log('onCompleted'));</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">setTimeout(() =&gt; {</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">&nbsp; &nbsp; // Clean up</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">&nbsp; &nbsp; subject.onCompleted();</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">&nbsp; &nbsp; subSubject1.dispose();</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">&nbsp; &nbsp; subSubject2.dispose();</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">}, 5000);</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">// =&gt; Value published to observer #1: 0</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">// =&gt; Value published to observer #2: 0</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">// =&gt; Value published to observer #1: 1</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">// =&gt; Value published to observer #2: 1</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">// =&gt; Value published to observer #1: 2</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">// =&gt; Value published to observer #2: 2</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">// =&gt; Value published to observer #1: 3</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">// =&gt; Value published to observer #2: 3</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">// =&gt; onCompleted</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">// =&gt; onCompleted</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">&lt;/code&gt;</span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\"><br></span></p><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; orphans: 3; widows: 3; margin-bottom: 0.85em;\"><span style=\"font-size: 16px; letter-spacing: 0.2px; line-height: 27.2px;\">&lt;/pre&gt;</span></p>"
                },
                "style": {}
              }
            },
            "5": {
              "title": "Types of Subjects",
              "id": 249,
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "<h2 id=\"different-types-of-subjects\" style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; position: relative; orphans: 3; widows: 3; page-break-after: avoid; margin-top: 1.275em; margin-bottom: 0.85em;\"><span style=\"font-size: 24.5px; letter-spacing: 0.2px;\">Different types of Subjects</span></h2><h2 id=\"different-types-of-subjects\" style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; position: relative; orphans: 3; widows: 3; page-break-after: avoid; margin-top: 1.275em; margin-bottom: 0.85em;\"><span style=\"font-size: 24.5px; letter-spacing: 0.2px;\"><br></span></h2><h2 id=\"different-types-of-subjects\" style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; position: relative; orphans: 3; widows: 3; page-break-after: avoid; margin-top: 1.275em; margin-bottom: 0.85em;\"><span style=\"font-size: 24.5px; letter-spacing: 0.2px;\">The Subject object in the RxJS library is a basic implementation, but you can create your own using the Subject.create method. There are other implementations of Subjects that offer different functionalities. All of these types store some (or all of) values pushed to them via onNext, and broadcast it back to its observers. In this way, they convert a Cold Observable into a Hot one. This means that if you Subscribe to any of these more than once (i.e. subscribe -&gt; unsubscribe -&gt; subscribe again), you will see at least one of the same value again. For more information on hot and cold observables, see the last section of the Creating and Subscribing to Simple Observable Sequences topic.</span></h2><h2 id=\"different-types-of-subjects\" style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; position: relative; orphans: 3; widows: 3; page-break-after: avoid; margin-top: 1.275em; margin-bottom: 0.85em;\"><span style=\"font-size: 24.5px; letter-spacing: 0.2px;\"><br></span></h2><h2 id=\"different-types-of-subjects\" style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased; position: relative; orphans: 3; widows: 3; page-break-after: avoid; margin-top: 1.275em; margin-bottom: 0.85em;\"><span style=\"font-size: 24.5px; letter-spacing: 0.2px;\">ReplaySubject stores all the values that it has published. Therefore, when you subscribe to it, you automatically receive an entire history of values that it has published, even though your subscription might have come in after certain values have been pushed out. BehaviourSubject is similar to ReplaySubject, except that it only stored the last value it published. BehaviourSubject also requires a default value upon initialization. This value is sent to observers when no other value has been received by the subject yet. This means that all subscribers will receive a value instantly on subscribe, unless the Subject has already completed. AsyncSubject is similar to the Replay and Behavior subjects, however it will only store the last value, and only publish it when the sequence is completed. You can use the AsyncSubject type for situations when the source observable is hot and might complete before any observer can subscribe to it. In this case, AsyncSubject can still provide the last value and publish it to any future subscribers.</span></h2>"
                },
                "style": {}
              },
              "ideas": {
                "1": {
                  "title": "Reply",
                  "id": 250
                },
                "2": {
                  "title": "Behavior",
                  "id": 251
                },
                "3": {
                  "title": "Async",
                  "id": 252
                }
              }
            }
          },
          "attr": {
            "style": {},
            "collapsed": true
          }
        },
        "3": {
          "title": "Notification",
          "id": 230,
          "ideas": {
            "1": {
              "title": "http://xgrommx.github.io/rx-book/content/notification/index.html",
              "id": 235
            },
            "2": {
              "title": "onNext",
              "id": 238
            },
            "3": {
              "title": "onError",
              "id": 239
            },
            "4": {
              "title": "onCompleted",
              "id": 240
            }
          },
          "attr": {
            "style": {},
            "collapsed": true
          }
        }
      }
    },
    "10.5": {
      "title": "Marble Diagrams, What?!",
      "id": 285,
      "attr": {
        "style": {},
        "collapsed": true
      },
      "ideas": {
        "1": {
          "title": "Is it a children's game?",
          "id": 286
        }
      }
    },
    "5.25": {
      "title": "Let's look at an example with Rxjs ",
      "id": 270,
      "attr": {
        "style": {}
      },
      "ideas": {}
    },
    "2.625": {
      "title": "What's RxJS",
      "id": 268,
      "attr": {
        "style": {},
        "position": [
          184.5,
          -264,
          37
        ],
        "collapsed": true
      },
      "ideas": {
        "1": {
          "title": "Developed my Microsoft",
          "id": 271,
          "attr": {
            "style": {}
          }
        },
        "2": {
          "title": "Functional Goodness",
          "id": 273,
          "ideas": {},
          "attr": {
            "style": {},
            "attachment": {
              "contentType": "text/html",
              "content": "<ul><li>filter</li><li>map</li><li>aaaaand immutable</li><li><br></li></ul>"
            }
          }
        },
        "3": {
          "title": "Observables",
          "id": 145,
          "ideas": {},
          "attr": {
            "style": {},
            "attachment": {
              "contentType": "text/html",
              "content": "<span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\">Maintains a list of objects (observers) and notifies them when the event happens</span><div><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\"><br></span></div><div><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\">http://xgrommx.github.io/rx-book/content/observable/index.html</span><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\"><br></span></div>"
            }
          }
        },
        "16": {
          "title": "Observers",
          "id": 227,
          "ideas": {},
          "attr": {
            "style": {},
            "attachment": {
              "contentType": "text/html",
              "content": "<div><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\">This is a link</span></div><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\"><div><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\"><br></span></div>http://xgrommx.github.io/rx-book/content/observer/index.html</span>"
            }
          }
        },
        "3.5": {
          "title": "Everything is a Stream!",
          "id": 287,
          "attr": {
            "style": {},
            "attachment": {
              "contentType": "text/html",
              "content": "<div>&lt;img src=\"http://i.imgur.com/AIimQ8C.jpg\" alt=\"Mantra\"&gt;<br><div><br></div><div><ul><li>A stream is an evented data</li><li><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\">http://xgrommx.github.io/rx-book/content/guidelines/introduction/index.html</span><br></li></ul></div></div>"
            }
          }
        },
        "9.75": {
          "title": "Node.js streams vs. Event Emitter",
          "id": 258,
          "attr": {
            "attachment": {
              "contentType": "text/html",
              "content": "<div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\"><b>Why not Event Emitters?</b></span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\"><br></span></font></div><div><span style=\"font-size: 13px; line-height: 16.9px; color: rgb(34, 36, 38); font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;\">You are correct that Rx streams and EventEmitter are very similar, both are implementations of the Observer pattern.</span><br></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\"><br></span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">The difference is that Rx contains functions for transforming and combining event streams. Imagine for instance that we want to delay each \"response event\" by 2 seconds. With EventEmitter, you would have to subscribe to that, and manually make a timeout:</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\"><br></span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">eventEmitter.on('response', function(res) {</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">&nbsp; &nbsp; setTimeout(function() { /* handle res */ }, 2000);</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">});</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">With Rx, you can create a new event stream which is simply the original stream applied to the delay function:</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\"><br></span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">responseStream.delay(2000).subscribe(function(res) {</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">&nbsp; &nbsp; /* handle res */</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">});</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">delay() is a simple function, and one of the many others available. There are so many different ways of modifying streams, that it becomes possible to program a lot of application logic just by transforming streams with all the possible functions, instead of relying on low-level logic such as setTimeout.</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\"><br></span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">Also check out this visual and interactive exploration of those functions.</span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\"><br></span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\"><br></span></font></div><div><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\">Node.js reactive extension plugin</span></font></div><div><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\">https://github.com/Reactive-Extensions/rx-node/blob/master/doc/api/nodejs.md</span><font color=\"#222426\" face=\"Arial, Helvetica Neue, Helvetica, sans-serif\"><span style=\"font-size: 13px; line-height: 16.9px;\"><br></span></font></div>"
            },
            "style": {}
          },
          "ideas": {}
        },
        "2.5": {
          "title": "What about Promises? ok",
          "id": 295,
          "attr": {
            "style": {}
          }
        }
      }
    }
  },
  "links": [],
  "attr": {
    "style": {}
  }
}