[{"title":"Scala","indent":0},{"indent":0,"title":"Scala"},{"indent":1,"title":"Concepts"},{"indent":2,"title":"Traits"},{"indent":2,"title":"Higher Order functions"},{"indent":2,"title":"Functional"},{"indent":2,"title":"Lang features"},{"indent":2,"content":"<div>SEAMLESS JAVA INTEROP<br></div><div>Scala runs on the JVM, so Java and Scala stacks can be freely mixed for totally seamless integration.</div><div><br></div><div>TYPE INFERENCE</div><div>So the type system doesn&#x2019;t feel so static. Don&#x2019;t work for the type system. Let the type system work for you!</div><div><br></div><div>CONCURRENCY</div><div>&amp; DISTRIBUTION</div><div>Use data-parallel operations on collections, use actors for concurrency and distribution, or futures for asynchronous programming.</div><div><br></div><div>TRAITS</div><div>Combine the flexibility of Java-style interfaces with the power of classes. Think principled multiple-inheritance.</div><div><br></div><div>PATTERN MATCHING</div><div>Think &#x201C;switch&#x201D; on steroids. Match against class hierarchies, sequences, and more.</div><div><br></div><div>HIGHER-ORDER FUNCTIONS</div><div>Functions are first-class objects. Compose them with guaranteed type safety. Use them anywhere, pass them to anything.</div>"},{"indent":2,"title":"Actors"},{"indent":3,"title":"Currently Akka actors"},{"indent":2,"title":"Classes "},{"indent":3,"title":"case classes"},{"indent":4,"title":"used as a value object?"},{"indent":4,"title":"no need for new to initialize an object"},{"indent":3,"title":"object"},{"indent":4,"title":"a static class?"},{"indent":2,"title":"Collections"},{"indent":3,"title":"by default immutable"},{"indent":3,"title":"Seq"},{"indent":4,"title":"a type of collections"},{"indent":4,"title":"http://www.scala-lang.org/api/current/index.html#scala.collection.Seq"},{"indent":2,"title":"lambdas"},{"indent":3,"title":"=>"},{"indent":1,"title":"Resources"},{"indent":2,"title":"http://www.scala-lang.org/documentation/"},{"indent":3,"title":"Scala Docs"},{"indent":2,"title":"sbt"},{"indent":3,"title":"build tool"},{"indent":2,"title":"Activiator"},{"indent":2,"title":"http://www.tutorialspoint.com/scala/scala_basic_syntax.htm"},{"indent":3,"title":"tutorials point"},{"indent":2,"title":"http://aperiodic.net/phil/scala/s-99/"},{"indent":3,"title":"99 scala problems"},{"indent":2,"title":"https://github.com/search?l=Scala&o=desc&q=scala&s=stars&type=Repositories&utf8=%E2%9C%93"},{"indent":3,"title":"top list of github repos"},{"indent":1,"title":"Project Starters"},{"indent":2,"title":"https://github.com/csoma/Scala-starter"},{"indent":3,"title":"scala-starter"},{"indent":2,"title":"https://github.com/scalatra/scalatra-sbt-prototype"},{"indent":3,"title":"Scalatara web framework"},{"indent":1,"title":"Third Party"},{"indent":2,"title":"play framework"},{"indent":2,"title":"scalatara"},{"indent":2,"title":"akka"},{"indent":2,"content":"<div>Build powerful concurrent &amp; distributed applications</div><div>more easily. Akka is a toolkit and runtime</div><div>for building highly concurrent,</div><div>distributed, and resilient</div><div>message-driven applications</div><div>on the JVM.</div>"},{"indent":3,"title":"Scala actors are deprecated in favor of akka"},{"indent":2,"title":"spray"},{"indent":3,"title":"https://github.com/spray/spray"},{"indent":4,"title":"Rest framework"},{"indent":3,"title":"https://drive.google.com/open?id=0B9tPYCpuqoIrTEcyUUpLb1BPY2s"},{"indent":4,"title":"my spray road"},{"indent":2,"title":"spark"},{"indent":3,"title":"https://github.com/mesos/spark"},{"indent":2,"title":"twitter scala http services"},{"indent":3,"title":"https://github.com/twitter/finatra"},{"indent":2,"title":"Sqeyrel, sql wrapper"},{"indent":3,"title":"https://github.com/squeryl/squeryl"},{"indent":2,"title":"Di in Scala"},{"indent":3,"title":"https://github.com/adamw/macwire"},{"indent":2,"title":"Scala-Android"},{"indent":3,"title":"http://macroid.github.io/ScalaOnAndroid.html"},{"indent":2,"title":"scalafx examples"},{"indent":3,"title":"https://github.com/scalafx/ScalaFX-Tutorials"},{"indent":2,"title":"scalafx"},{"indent":3,"title":"http://www.scalafx.org/docs/home/"},{"indent":2,"title":"Exercises and examples"},{"indent":3,"title":"https://github.com/fpinscala/fpinscala"},{"indent":2,"title":"functional programming extension"},{"indent":3,"title":"https://github.com/scalaz/scalaz"},{"indent":2,"title":"sbt"},{"indent":3,"title":"build tool"},{"indent":1,"title":"Pain Point"},{"indent":2,"title":"What's the reverse arrow -> in Scala loops"},{"indent":2,"content":"The left-arrow &lt;- operator is called a generator, so named because it&apos;s generating individual values from a range.<div><br></div><div><p><font color=\"#000000\" face=\"Verdana, Geneva, Tahoma, Arial, Helvetica, sans-serif\"><span>Following is the example of for loop with range using i to j syntax:</span></font></p><p><font color=\"#000000\" face=\"Verdana, Geneva, Tahoma, Arial, Helvetica, sans-serif\"><span><br></span></font></p><p><font color=\"#000000\" face=\"Verdana, Geneva, Tahoma, Arial, Helvetica, sans-serif\"><span>&lt;code&gt;object Test {</span></font></p><p><font color=\"#000000\" face=\"Verdana, Geneva, Tahoma, Arial, Helvetica, sans-serif\"><span>&#xA0; &#xA0;def main(args: Array[String]) {</span></font></p><p><font color=\"#000000\" face=\"Verdana, Geneva, Tahoma, Arial, Helvetica, sans-serif\"><span>&#xA0; &#xA0; &#xA0; var a = 0;</span></font></p><p><font color=\"#000000\" face=\"Verdana, Geneva, Tahoma, Arial, Helvetica, sans-serif\"><span>&#xA0; &#xA0; &#xA0; // for loop execution with a range</span></font></p><p><font color=\"#000000\" face=\"Verdana, Geneva, Tahoma, Arial, Helvetica, sans-serif\"><span>&#xA0; &#xA0; &#xA0; for( a &lt;- 1 to 10){</span></font></p><p><font color=\"#000000\" face=\"Verdana, Geneva, Tahoma, Arial, Helvetica, sans-serif\"><span>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0;println( &quot;Value of a: &quot; + a );</span></font></p><p><font color=\"#000000\" face=\"Verdana, Geneva, Tahoma, Arial, Helvetica, sans-serif\"><span>&#xA0; &#xA0; &#xA0; }</span></font></p><p><font color=\"#000000\" face=\"Verdana, Geneva, Tahoma, Arial, Helvetica, sans-serif\"><span>&#xA0; &#xA0;}</span></font></p><p><font color=\"#000000\" face=\"Verdana, Geneva, Tahoma, Arial, Helvetica, sans-serif\"><span>}</span></font></p><p><span>&lt;/code&gt;</span></p></div>"},{"indent":2,"title":"Blocks vs Functions"},{"indent":3,"title":"http://stackoverflow.com/questions/19007611/understanding-scala-blocks"},{"indent":4,"title":"blocks similar to anonymous classes in java"},{"indent":4,"title":"apply method is what's called internally"}]