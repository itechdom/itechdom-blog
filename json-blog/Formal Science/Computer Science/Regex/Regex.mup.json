[{"title":"Regex","indent":0},{"indent":0,"title":"Regex"},{"indent":1,"title":"Resources"},{"indent":2,"title":"http://regex.learncodethehardway.org/book/"},{"indent":3,"title":"Regex the hard way"},{"indent":2,"title":"Follow Along exercises"},{"indent":2,"title":"http://www.rexegg.com/regex-best-trick.html"},{"indent":3,"title":"Best Regex trick"},{"indent":1,"title":"Concepts"},{"indent":2,"title":"Basics"},{"indent":2,"content":"<div id=\"wmd-preview-section-34\" class=\"wmd-preview-section preview-content\"><h3 id=\"regex-basics\">Regex Basics</h3><ul><li>[abc] A single character: a, b or c</li><li>[^abc] Any single character but a, b, or c</li><li>[a-z] Any single character in the range a-z</li><li>[a-zA-Z] Any single character in the range a-z or A-Z</li><li>[1-9] any number between 1 and 9</li><li>^ Start of line</li><li>$ End of line</li><li>\\A Start of string</li><li>\\z End of string</li></ul></div><div id=\"wmd-preview-section-35\" class=\"wmd-preview-section preview-content\"><h3 id=\"shortcuts-meta-characters\">Shortcuts (meta characters)</h3><ul><li>. Any single character</li><li>\\s Any whitespace character</li><li>\\S Any non-whitespace character</li><li>\\d Any digit</li><li>\\D Any non-digit</li><li>\\w Any word character (letter, number, underscore)</li><li>\\W Any non-word character</li><li>\\b Any word boundary character</li></ul></div><div id=\"wmd-preview-section-36\" class=\"wmd-preview-section preview-content\"><h3 id=\"groups\">Groups</h3><ul><li>(&#x2026;) Capture everything enclosed</li><li>(a|b) a or b</li><li>? Zero or one of a</li><li>* Zero or more of a</li><li>+ One or more of a</li><li>{3} Exactly 3 of a</li><li>{3,} 3 or more of a</li><li>a{3,6} Between 3 and 6 of a</li></ul></div><div id=\"wmd-preview-section-37\" class=\"wmd-preview-section preview-content\"><h3 id=\"characters-that-needs-to-be-escaped\">Characters that needs to be escaped.</h3><ul><li>They are escaped with a backward slash \\\\</li><li>Characters are:</li></ul></div><div id=\"wmd-preview-section-38\" class=\"wmd-preview-section preview-content\"><pre class=\"prettyprint\"><code class=\" hljs ruby\">. | ( ) [ ] { } + \\ ^ <span class=\"hljs-variable\">$ </span>* ?</code></pre></div>"},{"indent":2,"title":"Capturing"},{"indent":2,"content":"<div>### capturing</div><div><br></div><div>* We can specify variables in regex that we can refer to later</div><div>* The exampel below stores month, day and year when given a date.</div><div><br></div><div>```ruby</div><div><br></div><div>(?&lt;month&gt;\\d{1,2})\\/(?&lt;day&gt;\\d{1,2})\\/(?&lt;year&gt;\\d{4})</div><div>```</div><div><br></div><div>Then we can do something like this:</div><div>```ruby</div><div>date_string = &quot;06/11/1985&quot;</div><div>pattern = /(?&lt;month&gt;\\d{1,2})\\/(?&lt;day&gt;\\d{1,2})\\/(?&lt;year&gt;\\d{4})/</div><div>result = date_string.match(pattern)</div><div># we can now access the days, month and year</div><div>result[:day] #11</div><div>result[:month] #06</div><div>result[:year] #1985</div><div><br></div><div>```</div><div><br></div><div><br></div><div>### exercise</div><div><br></div><div>* Write a pattern that will take a decimal number (ie: 3.4)</div><div>* It captures the number in dollars and cents</div><div>* display the dollars and cents in that number</div><div>* You should modify the previous example</div><div>```ruby</div><div>(?&lt;month&gt;\\d{1,2})\\/(?&lt;day&gt;\\d{1,2})\\/(?&lt;year&gt;\\d{4})</div><div>```</div>"},{"indent":2,"title":"Ways to use Regex"},{"indent":2,"content":"<div>### Ways to Use Regex in Ruby</div><div><br></div><div>* Match</div><div>* Scan</div><div>* =~</div><div>* Gsub</div><div>* Split</div><div><br></div><div>```ruby</div><div><br></div><div>a = /a/</div><div><br></div><div>a.class # Regexp</div><div><br></div><div>myString = &quot;A woman once said. A man once said. A child once said&quot;</div><div><br></div><div>match = myString.match(a) #this will return a</div><div><br></div><div>match = myString.scan(a) #this will return [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;]</div><div><br></div><div>match = myString.gsub(a,&quot;b&quot;) #this will replace all a(s) with b, leaving behind capital A</div><div><br></div><div>myString =~ a #return the index of the first occurance&#xA0;</div><div><br></div><div>match = myString.split(a) # split a string by a(s)</div><div><br></div><div>```</div>"}]