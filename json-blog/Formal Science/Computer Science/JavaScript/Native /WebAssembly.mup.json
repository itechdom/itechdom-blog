[{"title":"WebAssembly","indent":0},{"indent":0,"title":"WebAssembly"},{"indent":1,"title":"Purpose"},{"indent":2,"title":"Faster"},{"indent":2,"title":"Statically typed"},{"indent":2,"title":"Access to standard libraries and low level functionality"},{"indent":3,"title":"stdlib"},{"indent":1,"title":"resources"},{"indent":2,"title":"https://github.com/dherman/asm.js/"},{"indent":3,"title":"github repo"},{"indent":2,"title":"http://asmjs.org/"},{"indent":2,"title":"https://github.com/WebAssembly"},{"indent":2,"title":"https://developer.mozilla.org/en-US/demos/detail/bananabread"},{"indent":3,"title":"C/C++ game written in ASM.JS"},{"indent":2,"title":"http://kripken.github.io/emscripten-site/"},{"indent":3,"title":"Compile C/C++ to asm.js project"},{"indent":1,"title":"Concepts"},{"indent":2,"title":"Linking"},{"indent":2,"content":"Depending on your implementation: compilation or interpretation might happen (compilation is more optimized)."},{"indent":2,"title":"types"},{"indent":3,"title":"http://asmjs.org/spec/latest/#types"},{"indent":3,"title":"types that escape to external javascript"},{"indent":3,"title":"coercion"},{"indent":2,"title":"Bitwise operations"},{"indent":3,"title":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"},{"indent":4,"title":"operators"},{"indent":4,"content":"<p>The following table summarizes JavaScript&apos;s bitwise operators:</p><table class=\"standard-table\"><tbody><tr><th>Operator</th><th>Usage</th><th>Description</th></tr><tr><td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_AND\">Bitwise AND</a></td><td><code>a &amp; b</code></td><td>Returns a one in each bit position for which the corresponding bits of both operands are ones.</td></tr><tr><td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_OR\">Bitwise OR</a></td><td><code>a | b</code></td><td>Returns a one in each bit position for which the corresponding bits of either or both operands are ones.</td></tr><tr><td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_XOR\">Bitwise XOR</a></td><td><code>a ^ b</code></td><td>Returns a one in each bit position for which the corresponding bits of either but not both operands are ones.</td></tr><tr><td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_NOT\">Bitwise NOT</a></td><td><code>~ a</code></td><td>Inverts the bits of its operand.</td></tr><tr><td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Left_shift\">Left shift</a></td><td><code>a &lt;&lt; b</code></td><td>Shifts&#xA0;<code>a</code>&#xA0;in binary representation&#xA0;<code>b</code>&#xA0;(&lt; 32) bits to the left, shifting in zeroes from the right.</td></tr><tr><td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Right_shift\">Sign-propagating right shift</a></td><td><code>a &gt;&gt; b</code></td><td>Shifts&#xA0;<code>a</code>&#xA0;in binary representation&#xA0;<code>b</code>&#xA0;(&lt; 32) bits to the right, discarding bits shifted off.</td></tr><tr><td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Unsigned_right_shift\">Zero-fill right shift</a></td><td><code>a &gt;&gt;&gt; b</code></td><td>Shifts&#xA0;<code>a</code>&#xA0;in binary representation&#xA0;<code>b</code>&#xA0;(&lt; 32) bits to the right, discarding bits shifted off, and shifting in zeroes from the left.</td></tr></tbody></table><br><div>Example:</div><div><br></div><div><h3 id=\"(Bitwise_AND)\"><a name=\"Bitwise_AND\">&amp; (Bitwise AND)</a></h3><p>Performs the AND operation on each pair of bits.&#xA0;<code>a</code>&#xA0;AND&#xA0;<code>b</code>&#xA0;yields 1 only if both&#xA0;<code>a</code>&#xA0;and&#xA0;<code>b</code>&#xA0;are 1. The truth table for the AND operation is:</p><table class=\"standard-table\"><tbody><tr><td class=\"header\">a</td><td class=\"header\">b</td><td class=\"header\">a AND b</td></tr><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1<br></td></tr></tbody></table><br></div><div><pre class=\" language-html\" data-number=\"\"><code class=\" language-html\">.    9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 &amp; 9 (base 10) = 00000000000000000000000000001000 (base 2) = 8 (base 10)</code></pre></div>"},{"indent":2,"content":"<strong>Bitwise operators</strong><span>&#xA0;treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal&#xA0;</span><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\" title=\"/en-US/docs/JavaScript/Reference/Global_Objects/Number\">numbers</a></code><span>. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.</span><div><span><br></span></div><div><span>So they look at anything as binary, but eventually (and always) will return numbers.</span></div>"},{"indent":1,"title":"New Standard"},{"indent":2,"title":"http://www.2ality.com/2015/06/web-assembly.html"},{"indent":3,"title":"Web Assembly and why"},{"indent":0,"content":"Welcome to GDI&apos;s intro to Javascript. My name is &quot;Sam&quot; it&apos;s Osama Alghanmi and with me is Pedro Meza. We work for Charter communication doing Javascript.&#xA0;<div><br></div><div><br></div><div><b>Figure out a group activity that breaks the ice: I think that introduction first and then for 15 mins we talk to each other in a group of (a number here depending on the number of students).&#xA0;</b></div><div><b><br></b></div><div><b>&quot;This will enable us to break that first barrier&quot;</b></div><div><b><br></b></div><div><b><br></b></div>"}]